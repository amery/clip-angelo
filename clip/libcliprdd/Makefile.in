#
#                                            clip/libcliprdd/Makefile.in
#
Local_Depend 	= 		../include/*.ch 		\
							../include.h/*.h

OBJS 				= 		$(sort 						\
										rddclip.o 		\
										rdd.o 			\
										dbf.o 			\
										ntx.o 			\
										cdx.o 			\
										dbt.o 			\
										fpt.o 			\
										rushmore.o 		\
										btree.o 			\
										six.o 			\
										hiper.o 			\
							)

PROG 				= 		cliprdd
ADDLIBS 			=

export

######################################################################################
###################################################################################### local rules

install all: Makefile $(OBJS) $(ATARGET)

hash1 :
	$(E_xx)$(Clip_M_Dir)/init/LinkAllFiles.sh clip-libcliprdd

cfg :
	$(E_cp)cp --remove-destination -fu$(V) *.h $(Clip_I_Dir)/

cleanc:
	$(E_rm)rm -f$(V) 	*.b 			\
							*.tmp 		\
							test_ref.c 	\
							test.c 		\
							test.log 	\
							*.dbf 		\
							*. 			\
							.ntx 			\
							*.cdx 		\
							*.dbt 		\
							*.fpt 		\
							$(ATARGET) 	\
							test

distcleanc :
	$(E_rm)rm -rf$(V) *.g

rddclip.o:	rddclip.c ../include.h/ci_rdd.h Makefile
	$(E_cc)if [ -f $(subst .o,.g,$@) ] ; then 	\
		$(Trace_cc_d) ; 									\
		$(CC) $(C_FLAGS) -g -c $< ; 					\
	else 														\
		$(Trace_cc) ; 										\
		$(CC) $(C_FLAGS) -c $< ; 						\
	fi

rdd.o:		rdd.c ../include.h/ci_rdd.h Makefile
	$(E_cc)if [ -f $(subst .o,.g,$@) ] ; then 	\
		$(Trace_cc_d) ; 									\
		$(CC) $(C_FLAGS) -g -c $< ; 					\
	else 														\
		$(Trace_cc) ; 										\
		$(CC) $(C_FLAGS) -c $< ; 						\
	fi

dbf.o:		dbf.c ../include.h/ci_rdd.h Makefile
	$(E_cc)if [ -f $(subst .o,.g,$@) ] ; then 	\
		$(Trace_cc_d) ; 									\
		$(CC) $(C_FLAGS) -g -c $< ; 					\
	else 														\
		$(Trace_cc) ; 										\
		$(CC) $(C_FLAGS) -c $< ; 						\
	fi

ntx.o:		ntx.c ../include.h/ci_rdd.h Makefile
	$(E_cc)if [ -f $(subst .o,.g,$@) ] ; then 	\
		$(Trace_cc_d) ; 									\
		$(CC) $(C_FLAGS) -g -c $< ; 					\
	else 														\
		$(Trace_cc) ; 										\
		$(CC) $(C_FLAGS) -c $< ; 						\
	fi

cdx.o:		cdx.c ../include.h/ci_rdd.h Makefile
	$(E_cc)if [ -f $(subst .o,.g,$@) ] ; then 	\
		$(Trace_cc_d) ; 									\
		$(CC) $(C_FLAGS) -g -c $< ; 					\
	else 														\
		$(Trace_cc) ; 										\
		$(CC) $(C_FLAGS) -c $< ; 						\
	fi

dbt.o:		dbt.c ../include.h/ci_rdd.h Makefile
	$(E_cc)if [ -f $(subst .o,.g,$@) ] ; then 	\
		$(Trace_cc_d) ; 									\
		$(CC) $(C_FLAGS) -g -c $< ; 					\
	else 														\
		$(Trace_cc) ; 										\
		$(CC) $(C_FLAGS) -c $< ; 						\
	fi

fpt.o:		fpt.c ../include.h/ci_rdd.h Makefile
	$(E_cc)if [ -f $(subst .o,.g,$@) ] ; then 	\
		$(Trace_cc_d) ; 									\
		$(CC) $(C_FLAGS) -g -c $< ; 					\
	else 														\
		$(Trace_cc) ; 										\
		$(CC) $(C_FLAGS) -c $< ; 						\
	fi

rushmore.o:	rushmore.c ../include.h/ci_rdd.h Makefile
	$(E_cc)if [ -f $(subst .o,.g,$@) ] ; then 	\
		$(Trace_cc_d) ; 									\
		$(CC) $(C_FLAGS) -g -c $< ; 					\
	else 														\
		$(Trace_cc) ; 										\
		$(CC) $(C_FLAGS) -c $< ; 						\
	fi

btree.o:	btree.c ci_btree.h Makefile
	$(E_cc)if [ -f $(subst .o,.g,$@) ] ; then 	\
		$(Trace_cc_d) ; 									\
		$(CC) $(C_FLAGS) -g -c $< ; 					\
	else 														\
		$(Trace_cc) ; 										\
		$(CC) $(C_FLAGS) -c $< ; 						\
	fi

six.o:		six.c ../include.h/ci_rdd.h ../include/ci_six.ch Makefile
	$(E_cc)if [ -f $(subst .o,.g,$@) ] ; then 	\
		$(Trace_cc_d) ; 									\
		$(CC) $(C_FLAGS) -g -c $< ; 					\
	else 														\
		$(Trace_cc) ; 										\
		$(CC) $(C_FLAGS) -c $< ; 						\
	fi

hiper.o:	hiper.c ../include.h/ci_rdd.h ci_btree.h Makefile
	$(E_cc)if [ -f $(subst .o,.g,$@) ] ; then 	\
		$(Trace_cc_d) ; 									\
		$(CC) $(C_FLAGS) -g -c $< ; 					\
	else 														\
		$(Trace_cc) ; 										\
		$(CC) $(C_FLAGS) -c $< ; 						\
	fi

test: test.prg rddclip.o rdd.o dbf.o ntx.o cdx.o dbt.o fpt.o rushmore.o btree.o six.o hiper.o ../include.h/ci_clipbase.h ../libclip/clipbase.c ../libclip/libclip.a $(CLIP)
	$(Trace_clip)
	$(CLIP) -e -R test.prg

include $(Makefile_end_in)

