/*
	Copyright (C) 2001  ITK
	Author   : Paul Lasarev <paul@itk.ru>
	License : (GPL) http://www.itk.ru/clipper/license.html
*/
#ifndef CI_CLIP_H
#define CI_CLIP_H

#include "ci_clipcfg.h"
/*
#if defined(OS_MINGW)
	#include "ci__win32.h"
#else
	#define INT64 long long
#endif
*/

/*#define MEMDEBUG */

#include <stdio.h>
#include <stdlib.h>
#include <sys/types.h>
#include <sys/fcntl.h>
#include <sys/time.h>
#ifdef __FreeBSD__
	#include <unistd.h>
#endif

#if defined(__GNUC__)
		#include "ci_clipcfg.h"
#else
		#include "ci_wintypes.h"
#endif


#ifdef MEMDEBUG
#ifdef MALLOC_FUNC_CHECK
	#include "memdebug/malloc_str.h"
#endif
#include "memdebug/malloc.h"
#endif
#ifdef USE_THREADS
	#include <pthread.h>
#endif

union ClipVar;
struct ClipVarEl;
struct ClipMachine;
struct Screen;
struct ScreenBase;
struct rational;

struct ClipMachine *new_ClipMachine(struct Screen *scr);
void delete_ClipMachine(struct ClipMachine *mp);

typedef int ClipFunction(struct ClipMachine *mp);
struct DBFuncTable;

/* valid type values */
enum ClipVarType
{
	UNDEF_t = 0,
	CHARACTER_t = 1,
	NUMERIC_t = 2,
	LOGICAL_t = 3,
	DATE_t = 4,
	ARRAY_t = 5,
	MAP_t = 6,
	OBJECT_t = 7,
	CCODE_t = 8,
	PCODE_t = 9,
	MEMO_t = 10,
	DATETIME_t = 11,
};

enum ClipFlags
{
	F_NONE = 0,
	F_MPTR = 1,
	F_MSTAT = 2,
	F_MREF = 3,
};

#define MACRO len

typedef struct ClipType
{
	enum ClipVarType type:4;
	unsigned len:6;
	unsigned dec:6;
	enum ClipFlags flags:2;
	unsigned count:11;
	unsigned memo:1;
	unsigned field:1;
/*	unsigned noref:1;*/
}
ClipType;

typedef struct ClipBuf
{
	char *buf;
	int len;
}
ClipBuf;

typedef struct ClipVect
{
	void **items;
	int count;
}
ClipVect;

typedef struct ClipFieldDef
{
	long areahash;
	long fieldhash;
}
ClipFieldDef;

typedef struct ClipRefVar
{
	ClipType t;
	union ClipVar *vp;
	ClipFieldDef *fp;
}
ClipRefVar;

typedef struct ClipNumVar
{
	ClipType t;
	double d;
}
ClipNumVar;

typedef struct ClipLongVar
{
	ClipType t;
	long l;
}
ClipLongVar;

typedef struct ClipRationalVar
{
	ClipType t;
	struct rational *r;
}
ClipRationalVar;

typedef struct ClipStrVar
{
	ClipType t;
	ClipBuf str;
}
ClipStrVar;

typedef struct ClipLogVar
{
	ClipType t;
	int val;
}
ClipLogVar;

typedef struct ClipDateVar
{
	ClipType t;
	long julian;
}
ClipDateVar;

typedef struct ClipDateTimeVar
{
	ClipType t;
	long julian;
	long time;
}
ClipDateTimeVar;

typedef struct ClipArrVar
{
	ClipType t;
	union ClipVar *items;
	unsigned long count;
	unsigned long current;
}
ClipArrVar;

typedef struct ClipMapVar
{
	ClipType t;
	struct ClipVarEl *items;
	unsigned long count;
	unsigned long current;
}
ClipMapVar;

typedef struct ClipObjRtti
{
	const char *name;
	long hashId;
	void (*destroy) (struct ClipMachine * mp, void *obj, struct ClipObjRtti * rtti);
	void *(*clone) (struct ClipMachine * mp, union ClipVar * dest, union ClipVar * self);
	int (*print) (struct ClipMachine * mp, void *obj, struct ClipObjRtti * rtti, char **buf, int *buflen);
	int (*parse) (struct ClipMachine * mp, void *obj, struct ClipObjRtti * rtti, char *buf, int buflen);
	int (*save) (struct ClipMachine * mp, void *obj, struct ClipObjRtti * rtti, int recsize, char ***vectp, int *num);
	int (*load) (struct ClipMachine * mp, void **obj, struct ClipObjRtti * rtti, int recsize, char **vect, int num);
	int (*call) (struct ClipMachine * mp, void *obj, struct ClipObjRtti * rtti, long hash);
	int (*get) (struct ClipMachine * mp, void *obj, struct ClipObjRtti * rtti, long hash);
	int (*set) (struct ClipMachine * mp, void *obj, struct ClipObjRtti * rtti, long hash);
	long (*hash) (struct ClipMachine * mp, void *obj, struct ClipObjRtti * rtti);
	int (*cmp) (struct ClipMachine * mp, void *obj, struct ClipObjRtti * rtti, union ClipVar * robj);
	int (*fetch) (struct ClipMachine * mp, void *obj, struct ClipObjRtti * rtti, int dim);
	int (*store) (struct ClipMachine * mp, void *obj, struct ClipObjRtti * rtti, int dim);
	void *data;
}
ClipObjRtti;

typedef struct ClipObjVar
{
	ClipType t;
	void *obj;
	ClipObjRtti *rtti;
}
ClipObjVar;

struct ClipFile;
typedef struct ClipBlock
{
	struct ClipFile *file;
	char *func;
}
ClipBlock;

struct ClipVarFrame;

typedef struct ClipCodeVar
{
	ClipType t;
	union
	{
		ClipFunction *func;
		ClipBlock *block;
	}
	u;
	struct ClipVarFrame *uplocals;
}
ClipCodeVar;

typedef union ClipVar
{
	ClipType t;
	ClipNumVar n;
	ClipLongVar lv;
	ClipRationalVar r;
	ClipStrVar s;
	ClipLogVar l;
	ClipDateVar d;
	ClipObjVar o;
	ClipCodeVar c;
	ClipRefVar p;
	ClipArrVar a;
	ClipMapVar m;
	ClipDateTimeVar dt;
}
ClipVar;

typedef struct ClipVarEl
{
	ClipVar v;
	long no;
}
ClipVarEl;

typedef union ClipVarNum
{
	ClipNumVar _v;
	ClipVar v;
}
ClipVarNum;

typedef union ClipVarStr
{
	ClipStrVar _v;
	ClipVar v;
}
ClipVarStr;

typedef union ClipVarLog
{
	ClipLogVar _v;
	ClipVar v;
}
ClipVarLog;

typedef union ClipVarCode
{
	ClipCodeVar _v;
	ClipVar v;
}
ClipVarCode;

typedef struct ClipVarDef
{
	/*const char *funcname; */
	long name;		/*const char *name; *//* first contain number */
	void /*ClipVar */ *vp;
}
ClipVarDef;

typedef struct ClipHashBucket
{
	long hash;
	long offs;
}
ClipHashBucket;

typedef struct ClipHashNames
{
	int num;
	ClipHashBucket *buckets;
	char *mem;
}
ClipHashNames;

typedef struct ClipVarFrame
{
	int refcount;
	int size;
	ClipVar *vars;
	const char *names;
}
ClipVarFrame;


typedef struct ClipVarVect
{
	int count;
		ClipVar *items;
}
ClipVarVect;


typedef struct ClipFrame
{
	ClipVar *stack;
	ClipVar *sp;
	const char *filename;
	int line;
	long *privates;
	ClipVarFrame *localvars;
	ClipVarDef *locals;
	ClipVarDef *statics;
	struct ClipFrame *up;
	ClipHashNames *names;
	const char *procname;
	int stklen;
		ClipVarVect *tempvars;
}
ClipFrame;



#define SYSERRLEN	128

typedef struct ClipRect
{
	int top;
	int bottom;
	int left;
	int right;
}
ClipRect;

typedef struct ClipAttr
{
	int standard;
	int enhanced;
	int border;
	int background;
	int unselected;
	int u1;
	int u2;
	int u3;
	int u4;
	int u5;
}
ClipAttr;

typedef struct ClipWindow
{
	ClipRect rect;
	ClipRect format;
	int no;
	void *save;
	int shadow;		/* -1 if none */
}
ClipWindow;

/* Container */

#define _C_ITEM_TYPE_UNKNOWN	0
#define _C_ITEM_TYPE_FILE	1
#define _C_ITEM_TYPE_SQL	2
#define _C_ITEM_TYPE_RDD	3
#define _C_ITEM_TYPE_WIDGET	4
#define _C_ITEM_TYPE_REGEX	5
#define _C_ITEM_TYPE_GDLIB	6
#define _C_ITEM_TYPE_RYO	7
#define _C_ITEM_TYPE_I_INDEX	8
#define _C_ITEM_TYPE_I_ORDER	9
#define _C_ITEM_TYPE_DATETIME	10
#define _C_ITEM_TYPE_HIPER		11
#define _C_ITEM_TYPE_CORBA             12
#define _C_ITEM_TYPE_CORBA_INTERFACE   13
#define _C_ITEM_TYPE_BTREE	14
#define _C_ITEM_TYPE_GTK_TIMEOUT	15
#define _C_ITEM_TYPE_XML_PARSER	16

typedef struct ContainerItem
{
	void *item;
	int key;
	int type;
	void (*destroy)(void*);
}
ContainerItem;

typedef struct Container
{
	ContainerItem *items;
	int len;
	int key;
}
Container;

/*
 * ������ ��� ����, ��������
 * ������� ������ */
typedef struct C_FILE
{
	int type;	/* type of opened file, see fileio.ch:FT_* */
	int fileno;	/* real file or socket number */
	FILE *f;	/* STDIO lib buffer */
	pid_t pid;	/* pid for pipe children process */
	int stat;	/* see fileio.ch:FS_* flags */
	int timeout;/* default timeout for eoperations */
	long hash;  /* hash code for the full file name (with path) */
	struct ClipMachine* cm;
} C_FILE;

/* Container end */

struct _RDD_DATA_VTBL_;
struct _RDD_INDEX_VTBL_;
struct _RDD_MEMO_VTBL_;

typedef struct DBDriver
{
	char id[9];
	char data[6];
	char idx[6];
	char memo[6];
} DBDriver;

typedef struct SQLDriver
{
	char id[11];
	char name[21];
	char desc[101];
	int (*connect)(struct ClipMachine*);
} SQLDriver;

typedef struct ProfileBucket
{
		long hash;
		char *procname;
		char *filename;
	struct timeval self;
	struct timeval start;
		unsigned long callno;
		int started;
#if 0
	Coll callby;
#endif
}
ProfileBucket;

typedef struct ProfileCount
{
	ProfileBucket *bucket;
		unsigned long count;
}
ProfileCount;

extern int _clip_profiler;

typedef struct ClipMachine
{
	struct ClipMachine *next;
	int inited;
	int deleted;

	ClipVar *bp;
	ClipFrame *fp;
	int argc;

	ClipVar *trapVar;
	ClipVect trapTrace;

	struct _HashTable *publics;
	struct _HashTable *privates;
	struct _HashTable *spaces;

	struct _HashTable *functions;
	int main_func_level;
	ClipVect dlls;
	ClipBlock *exits;
	int nexits;
	ClipFunction **cexits;
	int ncexits;
	struct _HashTable *keys;

	int corba;

	DBDriver **dbdrivers;
	int *ndbdrivers;
	struct _RDD_DATA_VTBL_ ***data_drivers;
	int *ndata_drivers;
	struct _RDD_INDEX_VTBL_ ***idx_drivers;
	int *nidx_drivers;
	struct _RDD_MEMO_VTBL_ ***memo_drivers;
	int *nmemo_drivers;
	char *def_data_driver;
	char *def_idx_driver;
	char *def_memo_driver;
	char *def_db_driver;

	SQLDriver **sqldrivers;
	int *nsqldrivers;

	struct _HashTable *tasklocks;
	struct _HashTable *fileopens;

	int neterr;

	struct _HashTable *aliases;
	ClipVect *areas;
	ClipVect *areaStack;
	long curArea;

	void *driver;

	/* Visual FoxPro's DATETIME format */
	int hours;
	int seconds;

	unsigned long flags;
	unsigned long flags1;
	int optimizelevel;
	int m6_error;
	int index_buffer_limit;
	int lockstyle;
	int mblocksize;
	int autorder;
	char *date_format;
	int decimals;
	int fileCreateMode;
	int dirCreateMode;
	int epoch;
	char *path;
	char *defaul;
	int typeahead;
	int *kbdbuf;
	int **kbdptr;
	int lastkey;
	int cursor;
	char *altfile;
	void *out;		/* std out file */
	void *alt;
	char *extrafile;
	void *extra;
	char *prfile;
	char *real_prfile;
	void *printer;
	char *rootpath;
	int margin;
	char *delimchars;
	int msgline;
	int notcancel;
	int eventmask;

	struct Screen *screen;
	struct ScreenBase *screen_base;
	int fullscreen;
	int update;
	int inkey;
	ClipAttr attr;
	int colorSelect;       /* for colorselect function */
	int prow;
	int pcol;
	char *buf;
	int buflen;

	ClipVect history;

	struct _HashTable *store;
	ClipVar *errorblock;
	int errorlevel;
	int noerrblock;		/* don't call errorblock on errors */
	char syserr[SYSERRLEN];

	ClipWindow *windows;
	int wnum;
	ClipRect wboard;
	int wshadow;

	Container *container;
	ClipFrame *inMacro;

	struct _HashTable *hashnames;
	int print_deep;
	int print_max_deep;

	unsigned char prntbl[256];
	unsigned char prn_xlat[256];
	unsigned char term_xlat[256];

	struct _HashTable *fields;

	/* if not null, all output come here */
	struct OutBuf *obuf;
	struct OutBuf *ebuf;

	/* output to membuf (SET PRINTER TO MEMBUF) */
	struct OutBuf *pbuf;

	ClipVar *obj;
	struct _HashTable *profiler;
		ProfileBucket *pbucket;
}
ClipMachine;

#define CLIP_MAX_ERRORBLOCK_DEEP 128
#define CLIP_MAX_PRINT_DEEP 16


#define CLIP_MAX_HISTORY 32

#define MIN_NUMERIC_DIFF 0.00000000000001

extern long _hash_cur_dir[26];

#define CLIP_OS_NAME "Linux"

#define CLIP_CUR_DRIVE	0x3fffffd0

/* FILESEEK internal buffer */
#define CLIP_FSDATA_HASH_KEY 0x4ef45399		/* hashstr(CLIP_FSDATA_HASH_KEY) */

/* flags */
#define EXACT_FLAG	0x1
#define FIXED_FLAG	0x2
#define EXCLUSIVE_FLAG	0x4
#define SOFTSEEK_FLAG	0x8
#define UNIQUE_FLAG	0x10
#define DELETED_FLAG	0x20
#define CANCEL_FLAG	0x40
#define DEBUG_FLAG	0x80
#define CONSOLE_FLAG	0x100
#define ALTERNATE_FLAG	0x200
#define DEVICE_FLAG	0x400
#define EXTRA_FLAG	0x800
#define PRINTER_FLAG	0x1000
#define BELL_FLAG	0x2000
#define CONFIRM_FLAG	0x4000
#define ESCAPE_FLAG	0x8000
#define INSERT_FLAG	0x10000
#define EXIT_FLAG	0x20000
#define INTENSITY_FLAG	0x40000
#define SCOREBOARD_FLAG	0x80000
#define DELIMITERS_FLAG	0x100000
#define WRAP_FLAG	0x200000
#define MCENTER_FLAG	0x400000
#define SCROLLBREAK_FLAG 0x800000
#define CENTURY_FLAG 	0x1000000
#define RATIONAL_FLAG	0x2000000
#define TRANSLATE_FLAG	0x4000000

/* flags1 */
#define AUTOPEN_FLAG        0x1
#define OPTIMIZE_FLAG       0x2
#define MAPERR_FLAG         0x4
#define DISPBOX_FLAG        0x8
#define NOEXPAND_MACRO_FLAG 0x10
#define FOPENMODE_FLAG      0x20
#define BUFFERING_FLAG      0x40
#define MAP_FILE_FLAG       0x80
#define MULTILOCKS_FLAG     0x100
#define FLUSHOUT_FLAG	    0x200
#define UTF8TERM_FLAG	    0x400
#define IDLEINKEY_FLAG	    0x800

#define DEFAULT_COLOR "W/N,N/W,N,N,N/W"

/* cursor types */
#define SC_NONE		0
#define SC_NORMAL	1
/* lower half */
#define SC_INSERT	2
/* full block */
#define SC_SPECIAL1	3
/* upper half */
#define SC_SPECIAL2	4

ClipMachine *cur_ClipMachine();

void destroy_ClipBuf(ClipBuf * buf);
void setLen_ClipBuf(ClipBuf * buf, int newlen);

void destroy_ClipVect(ClipVect * vect);
void add_ClipVect(ClipVect * vect, void *item);
void clear_ClipVect(ClipVect * vect);
void remove_ClipVect(ClipVect * vect, int no);
void insert_ClipVect(ClipVect * vect, void *item, int pos);

typedef struct ClipFile
{
	int refCount;
	char *body;
	char *mem;
	long bodySize;
	int bodyMem;		/* 0 -> mmap, 1 -> malloc, 3 -> static mem */
	char *name;
	union ClipVar *statics;
	int staticsMem;
	int nstatics;
	long *pos;
	long *end;
	void *cargo;
	ClipHashNames *hash_names;
	ClipVarDef *staticDefs;
	int fd;
}
ClipFile;

void _clear_trap(ClipMachine * mp);

/* return codes */

#define CLIP_SUCCESS	0
#define CLIP_INVARGC	1
#define CLIP_INVARGV	2
#define CLIP_TRAP	3

/* runtime support */

extern char *_clip_progname;
extern int _clip_argc;
extern char **_clip_argv;
extern char **_clip_envp;

extern int _clip_raw_argc;
extern char **_clip_raw_argv;

int _clip_init(ClipMachine * mp, int argc, char **argv, char **envp);
void _clip_exit(void);
void _clip_signal(int sig);
extern int _clip_sig_flag;
void _clip_signal_real(int sig);

long _clip_hashstr(const char *x);
long _clip_casehashstr(const char *x);
long _clip_hashbytes(long seed, const char *bytes, int len);
long _clip_hashbytes16(long seed, const char *bytes, int len);
long _clip_hashbytes32(long seed, const char *bytes, int len);
long _clip_casehashbytes(long seed, const char *bytes, int len);
/* trim head and tail spaces */
long _clip_hashword(const char *x, int l);
long _clip_casehashword(const char *x, int l);

int _clip_isalpha(unsigned char ch);
long _clip_hash(ClipMachine * mp, ClipVar * vp);
long _clip_casehash(ClipMachine * mp, ClipVar * vp);

void *_clip_memdup(const void *src, int len);
const char *_clip_typename(ClipVar * vp);

int _clip_func(struct ClipMachine *mp, ClipFunction f, int argc, int rest, ClipVarFrame * uplocals);
int _clip_proc(struct ClipMachine *mp, ClipFunction f, int argc, int rest, ClipVarFrame * uplocals);
int _clip_func_hash(struct ClipMachine *mp, long hash, int argc, int rest, ClipVarFrame * uplocals);
int _clip_proc_hash(struct ClipMachine *mp, long hash, int argc, int rest, ClipVarFrame * uplocals);
int _clip_func_name(struct ClipMachine *mp, int argc);

int _clip_incr(struct ClipMachine *mp, void *lval, int isIncr, int isPost);

int _clip_call(struct ClipMachine *mp, int argc, long hash);
int _clip_get(struct ClipMachine *mp, long hash);
int _clip_set(struct ClipMachine *mp, long hash);

void _clip_return(ClipMachine * mp);
void _clip_pop(ClipMachine * mp);

void _clip_resume(ClipMachine * mp, int nlocals, int nreflocals);
void _clip_vresume(ClipMachine * mp, int num, ClipVar * vect);
void _clip_destroy(ClipMachine * mp, ClipVar * vp);
ClipVar *_clip_ref_destroy(ClipMachine * mp, ClipVar * vp);
void _clip_delete(ClipMachine * mp, ClipVar * vp);
int _clip_iassign(ClipMachine * mp, void *lval);
int _clip_assign(ClipMachine * mp, void *lval);
int _clip_macroassign(ClipMachine * mp, int op, int isTop, int fieldprec);
int _clip_nameassign(ClipMachine * mp, char *name, int len, ClipVar * vp, int fieldprec);
int _clip_refassign(ClipMachine * mp, void *lval, int isTop);

int _clip_clone(ClipMachine * mp, ClipVar * dest, ClipVar * src);
int _clip_mclone(struct ClipMachine *mp, ClipVar * dest, ClipVar * src);
int _clip_dup(ClipMachine * mp, ClipVar * dest, ClipVar * src);
int _clip_ref(ClipMachine * mp, void *vp, int noadd);
void _clip_unref_arr(ClipMachine * mp);
int _clip_unref(ClipMachine *mp, ClipVar *lval);
int  _clip_refmacro(ClipMachine * mp); /* direct push refvar */

int _clip_opiassign(ClipMachine * mp, void *lval, int op);
int _clip_opassign(ClipMachine * mp, void *lval, int op);
int _clip_op(ClipMachine * mp, int op);
int _clip_not(ClipMachine * mp);
int _clip_minus(ClipMachine * mp);

int _clip_log(ClipVar * vp);
long _clip_long(ClipVar * vp);
double _clip_double(ClipVar * vp);
void _clip_var_num(double num, ClipVar * vp);
void _clip_var_log(int val, ClipVar * vp);

int _clip_macro(ClipMachine * mp);
int _clip_expand(ClipMachine * mp, ClipBuf * dest, ClipBuf * src);
int _clip_strFromVar(ClipMachine * mp, ClipVar * vp, char **newstr, int *lenp);	/* return new str */
void _clip_var_str(const char *str, int len, ClipVar * vp);
int _clip_expand_var(ClipMachine * mp, ClipVar * vp);

long _clip_pop_hash(ClipMachine * mp);	/* pop stack */
long _clip_pop_shash(ClipMachine * mp);	/* pop stack case-sensitive */
ClipVar *_clip_pop_ref(ClipMachine * mp);
void _clip_pop_fieldhash(ClipMachine * mp, long *area, long *field);	/* pop stack, split to alias->field */

void _clip_memvar_private(ClipMachine * mp, long hash);
void _clip_add_private(ClipMachine * mp, long hash);
void _clip_memvar_public(ClipMachine * mp, long hash);
struct _HashTable *_clip_space(ClipMachine * mp, long space);
ClipVar *_clip_memvar_space(ClipMachine * mp, struct _HashTable *space, long hash, int newvar);
void _clip_remove_privates(ClipMachine * mp, int num,... /*long hash */ );
void _clip_vremove_privates(ClipMachine * mp, int num, long *vect);
int _clip_push(ClipMachine * mp, /*ClipVar */ void *vp);
void _clip_push_nil(ClipMachine * mp);
void _clip_push_true(ClipMachine * mp);
void _clip_push_false(ClipMachine * mp);
int _clip_push_static(ClipMachine * mp, /*ClipVar */ void *vp);
void _clip_push_hash(ClipMachine * mp, long hash);
void _clip_push_locale(ClipMachine * mp);
int _clip_push_local(ClipMachine * mp, int no);
ClipVar *_clip_ref_local(ClipMachine * mp, int no);

/* calc hash on stack top */
int _clip_calc_hash(ClipMachine * mp);
int _clip_calc_hash2(ClipMachine * mp, int rev);

/* with stack */
void _clip_sarray(ClipMachine * mp, int n);
void _clip_dimarray(ClipMachine * mp, int ndim);
void _clip_newarray(ClipMachine * mp, int n,...);
void _clip_vnewarray(ClipMachine * mp, int n, long *vect);
int _clip_store(ClipMachine * mp, int dim, int byref);
int _clip_istore(ClipMachine * mp, int dim, int byref);
int _clip_opstore(ClipMachine * mp, int dim, int op);
int _clip_opistore(ClipMachine * mp, int dim, int op);
int _clip_fetch(ClipMachine * mp, int dim);
int _clip_ifetch(ClipMachine * mp, int dim);
ClipVar *_clip_fetchref(ClipMachine * mp, int dim);

/* map access */
int _clip_map(ClipMachine * mp, ClipVar * ap);
int _clip_madd(ClipMachine * mp, ClipVar * ap, long no, ClipVar * vp);
int _clip_mdel(ClipMachine * mp, ClipVar * ap, long no);
int _clip_mind(ClipMachine * mp, ClipVar * ap, long no, int *ind);

ClipVar *_clip_mget(ClipMachine * mp, ClipVar * ap, long no);
int _clip_mtype(ClipMachine * mp, ClipVar * ap, long no);
int _clip_mputn(ClipMachine * mp, ClipVar * ap, long no, double n);
int _clip_mgetn(ClipMachine * mp, ClipVar * ap, long no, double *n);
int _clip_mgetl(ClipMachine * mp, ClipVar * ap, long no, int *n);
int _clip_mputl(ClipMachine * mp, ClipVar * ap, long no, int n);
int _clip_mputc(ClipMachine * mp, ClipVar * ap, long no, char *str, int len);
int _clip_mgetc(ClipMachine * mp, ClipVar * ap, long no, char **strp, int *lenp);

/* array access */
int _clip_array(ClipMachine * mp, ClipVar * resp, int ndim, long *dims);
int _clip_asize(ClipMachine * mp, ClipVar * ap, int ndim, long *dims);
int _clip_adel(ClipMachine * mp, ClipVar * ap, int ndim, long *dims);
int _clip_ains(ClipMachine * mp, ClipVar * ap, int ndim, long *dims);
int _clip_aset(ClipMachine * mp, ClipVar * ap, ClipVar * vp, int ndim, long *dims);
int _clip_aget(ClipMachine * mp, ClipVar * ap, ClipVar * resp, int ndim, long *dims);
ClipVar * _clip_aref(ClipMachine * mp, ClipVar * ap, int ndim, long *dims);
int _clip_aadd(ClipMachine * mp, ClipVar *ap, ClipVar * vp);

int _clip_memvar(ClipMachine * mp, long hash);
int _clip_fmemvar(ClipMachine * mp, long hash);
int _clip_memvarf(ClipMachine * mp, long hash);
int _clip_ref_fmemvar(ClipMachine * mp, long hash);
ClipVar *_clip_ref_memvar(ClipMachine * mp, long hash);
ClipVar *_clip_ref_memvar_noadd(ClipMachine * mp, long hash);
int _clip_public(ClipMachine * mp, long hash);
ClipVar *_clip_ref_public(ClipMachine * mp, long hash);
ClipVar *_clip_ref_public_noadd(ClipMachine * mp, long hash);

int _clip_is_memvar(ClipMachine * mp, long hash);
int _clip_is_private(ClipMachine * mp, long hash);
int _clip_is_public(ClipMachine * mp, long hash);

int _clip_field(ClipMachine * mp, long hash, long area);
int _clip_try_field(ClipMachine * mp, long hash);
int _clip_take_field(ClipMachine * mp, long hash, long area, ClipVar * dest);
int _clip_assign_field(ClipMachine * mp, long hash, long area);
int _clip_iassign_field(ClipMachine * mp, long hash, long area);
int _clip_push_area(ClipMachine * mp, long newarea);
int _clip_pop_area(ClipMachine * mp);
int _clip_set_area(ClipMachine * mp, long area);
void _clip_close_all(ClipMachine * mp);

int _clip_fm_assign(ClipMachine * mp, long hash);
int _clip_fm_iassign(ClipMachine * mp, long hash);

void _clip_param(ClipMachine * mp, int pno, int lno);
ClipVar *_clip_ref_param(ClipMachine * mp, int no, ClipVar * params);
void _clip_memvar_param(ClipMachine * mp, long hash, int no);

int _clip_loglevel(int newlevel);
void _clip_logg(int level, const char *fmt,...);

int _clip_register(ClipMachine * mp, ClipFunction * func, const char *name);
int _clip_register_hash(ClipMachine * mp, ClipFunction * func, long hash);
int _clip_register_block(ClipMachine * mp, ClipBlock block, long hash);

void _clip_trap(ClipMachine * mp, const char *filename, int line);
void _clip_trap_str(ClipMachine * mp, const char *filename, int line, const char *str);
int _clip_trap_operation(ClipMachine * mp, const char *filename, int line, const char *oper, ClipVar *lval);
void _clip_trap_printf(ClipMachine * mp, const char *filename, int line, const char *fmt,...);
void _clip_trap_printv(ClipMachine * mp, const char *filename, int line, const char *fmt, void *vect);
void _clip_trap_var(ClipMachine * mp, const char *filename, int line, ClipVar * var);
void _clip_trap_pop(ClipMachine * mp);
void _clip_trap_invargv(ClipMachine * mp, const char *filename, int line);

int _clip_trap_err(ClipMachine * mp, int genCode, int canDefault, int canRetry,
		   const char *subSystem, int subCode,
		   const char *operation);

struct Coll;
int _clip_load(ClipMachine * mp, const char *name, struct Coll *names, ClipVar *res);

int destroy_ClipFile(ClipMachine * mp, struct ClipFile *fp);
void delete_ClipFile(ClipMachine * mp, struct ClipFile *fp);
int _clip_first_File(struct ClipFile *file, ClipCodeVar * dest, long *hash);
int _clip_next_File(struct ClipFile *file, ClipCodeVar * dest, long *hash);

void _clip_init_Block(ClipMachine * mp, ClipBlock * dest, struct ClipFile *file, char *func);
void destroy_Block(ClipMachine * mp, ClipBlock * bp);
void _clip_dup_Block(ClipMachine * mp, ClipBlock * src, ClipBlock * dest);
int _clip_compile_Block(ClipMachine * mp, char *str, int len, ClipBlock * dest);

int _clip_code_func(ClipMachine * mp, ClipBlock * bp, int argc, int rest, ClipVarFrame * uplocals);
int _clip_code_proc(ClipMachine * mp, ClipBlock * bp, int argc, int rest, ClipVarFrame * uplocals);

void _clip_pcount(ClipMachine * mp);
void _clip_pshift(ClipMachine * mp);
int _clip_parn(ClipMachine * mp);

int _clip_cond(ClipMachine * mp, int *ip);
int _clip_tcond(ClipMachine * mp, int *ip);	/* don't pop stack */

int _clip_find_obj(ClipMachine * mp, long otype, ClipObjRtti ** rtti);

typedef struct ClipNameEntry
{
	long hash;
	ClipFunction *f;
}
ClipNameEntry;

typedef struct ClipModule
{
	const char *name;
	ClipNameEntry *cfunctions;
	ClipFunction **inits;
	ClipFunction **exits;
	ClipFile **cpfiles;
	const char **pfunctions;
	ClipObjRtti **objrtti;
	struct DBFuncTable **dbdrivers;
}
ClipModule;

int _clip_register_module(ClipMachine * mp, ClipModule * modp);
struct DBFuncTable *_clip_get_driver(ClipMachine * mp, const char *driver);
int _clip_register_driver(ClipMachine * mp, struct DBFuncTable *vtbl);
int _clip_register_file(ClipMachine * mp, ClipFile * file);

int _clip_main(ClipMachine * mp, long hash, int argc, char **argv, char **envp);
int _clip_main_func(ClipMachine * mp, ClipFunction func, int argc, char **argv, char **envp);
int _clip_main_code(ClipMachine * mp, ClipBlock * block, int argc, char **argv, char **envp);

typedef struct ClipInitStruct
{
	/*ClipNameEntry _cfunctions[];*/
	ClipFunction *(*_clip_builtin)(long hash);
	ClipFunction **_inits, ****_libinits;
	ClipFunction **_exits, ****_libexits;
	const char **_pfunctions;
	struct ClipFile **_cpfiles, ****_libcpfiles;
	struct ClipObjRtti **_objrtti;
	void **_dbdrivers;
	char *CLIP_HOSTCS;
}
ClipInitStruct;

typedef struct OutBuf
{
	char *buf;
	char *end;
	char *ptr;
}
OutBuf;

void init_Buf(OutBuf * bp);
void destroy_Buf(OutBuf * bp);
void putByte_Buf(OutBuf * bp, unsigned char byte);
void putShort_Buf(OutBuf * bp, short s);
void putLong_Buf(OutBuf * bp, long l);
void putInt32_Buf(OutBuf * bp, long l);
void putDouble_Buf(OutBuf * bp, double d);
void putStr_Buf(OutBuf * bp, char *str);
void putBuf_Buf(OutBuf * bp, char *buf, int len);

void _clip_cdate(long ju, int *dd, int *mm, int *yy, int *ww);
long _clip_jdate(int dd, int mm, int yy);

/* extension system */
int _clip_parinfo(ClipMachine * mp, int num);
int _clip_parni(ClipMachine * mp, int num);
long _clip_parnl(ClipMachine * mp, int num);
double _clip_parnd(ClipMachine * mp, int num);
int _clip_parp(ClipMachine * mp, int num, int *len, int *dec);	/* return 0 on success */
char *_clip_parc(ClipMachine * mp, int num);
char *_clip_parcl(ClipMachine * mp, int num, int *len);
int _clip_parl(ClipMachine * mp, int num);
ClipVar *_clip_par(ClipMachine * mp, int num);
ClipVar *_clip_spar(ClipMachine * mp, int num);
long _clip_pardj(ClipMachine * mp, int num);	/* julian */
long _clip_pardtj(ClipMachine * mp, int num, long *time);
long _clip_pardc(ClipMachine * mp, int num, int *yy, int *mm, int *dd, int *ww);	/* calendar */

int _clip_par_isref(ClipMachine * mp, int num); /* return 1 if parameter sent by ref */
int _clip_par_assign(ClipMachine * mp, int num, ClipVar *vp);
int _clip_par_assign_str(ClipMachine * mp, int num, char *str, int str_len);
int _clip_par_assign_str_m(ClipMachine * mp, int num, char *str, int str_len); /* malloc'ed str */

void _clip_retni(ClipMachine * mp, int n);
void _clip_retnl(ClipMachine * mp, long n);
void _clip_retnd(ClipMachine * mp, double n);
void _clip_retndp(ClipMachine * mp, double n, int len, int dec);
void _clip_retc(ClipMachine * mp, char *str);
void _clip_retcn(ClipMachine * mp, char *str, int len);
void _clip_retcn_m(ClipMachine * mp, char *str, int l);		/* str is malloc'ed */
void _clip_retl(ClipMachine * mp, int l);
void _clip_retdj(ClipMachine * mp, long julian);
void _clip_retdtj(ClipMachine * mp, long julian, long time);
void _clip_retdc(ClipMachine * mp, int yy, int mm, int dd);

void _clip_retnr(ClipMachine * mp, struct rational *r, int len, int dec);

int _clip_storni(ClipMachine * mp, int n, int num, int ind);
int _clip_stornl(ClipMachine * mp, long n, int num, int ind);
int _clip_stornd(ClipMachine * mp, double n, int num, int ind);
int _clip_storclen(ClipMachine * mp, const char *str, int len, int num, int ind);
int _clip_storc(ClipMachine * mp, const char *str, int num, int ind);
int _clip_storl(ClipMachine * mp, int l, int num, int ind);
int _clip_stordj(ClipMachine * mp, long julian, int num, int ind);
int _clip_stordc(ClipMachine * mp, int yy, int mm, int dd, int num, int ind);

#define RETPTR(mp) ((mp)->bp-(mp)->argc - 1)
#define ARGPTR(mp,num) ((mp)->bp-((mp)->argc -((num)-1)))
ClipVar *_clip_unptr(ClipVar * vp);

#define _parinfo(num)	_clip_parinfo(_mp, (num))
#define _pcount()	(_mp->argc)
#define _parni(num)	_clip_parni(_mp, (num))
#define _parnl(num)	_clip_parnl(_mp, (num))
#define _parnd(num)	_clip_parnd(_mp, (num))
#define _parc(num)	_clip_parc(_mp, (num))
#define _parl(num)	_clip_parl(_mp, (num))

#define _retni(n)	_clip_retni(_mp, (n))
#define _retnl(n)	_clip_retnl(_mp, (n))
#define _retnd(n)	_clip_retnd(_mp, (n))
#define _retl(n)	_clip_retl(_mp, (n))
#define _retc(n)	_clip_retc(_mp, (n))

#define _storni(n,num)	_clip_storni(_mp, (n), (num), 0)
#define _stornl(n,num)	_clip_stornl(_mp, (n), (num), 0)
#define _stornd(n,num)	_clip_stornd(_mp, (n), (num), 0)
#define _storl(n,num)	_clip_storl(_mp, (n), (num), 0)
#define _storc(n,num)	_clip_storc(_mp, (n), (num), 0)

int _clip_invoke(ClipMachine * mp, const char *name, void *result, int result_type, const char *fmt,...);

/*
   invoke call of Clip function
   fmt set num and type of args - one char for one arg:
   fmt:    type:                C-type:
   U    UNDEF           int
   C    CHARACTER       char*
   N    NUMERIC         double
   D    DATE            long
   L    LOGICAL         int
 */

/* 128-bytes compare/transform tables */
extern unsigned char *_clip_cmptbl;
extern unsigned char *_clip_uptbl;
extern unsigned char *_clip_lowtbl;
extern unsigned char *_clip_isalpha_tbl;
extern unsigned char *_clip_pgtbl;
extern unsigned char *_clip_intbl;
extern unsigned char *_clip_outtbl;

void _clip_upstr(char *s, int len);
int _clip_toupper(int ch);
int _clip_tolower(int ch);

int _clip_close_printer(ClipMachine * mp);
int _clip_printf(ClipMachine * mp, const char *fmt,...);
int _clip_sprintf(ClipMachine * mp, const char *fmt,...);
int _clip_vsprintf(ClipMachine * mp, const char *fmt, void *vect);
int _clip_init_screen(ClipMachine * mp);
int _clip_resume_screen(ClipMachine * mp);
int _clip_str2attr(char *str, int len);
int _clip_attr2str(int attr, char *buf, int buflen, int num_format);

int _clip_cmp(ClipMachine * mp, ClipVar * lp, ClipVar * rp, int *res, int bytype);

int _clip_eval(ClipMachine * mp, ClipVar * blockp, int argc, ClipVar * stackp, ClipVar * retp);
int _clip_eval_macro(ClipMachine * mp, char *str, int len, ClipVar * dest);

int _clip_key(ClipMachine * mp, int timeout_ms /* <0 ==> unlimited wait */, int event_mask );
/* event_mask values (from inkey.ch) */
#define _CLIP_INKEY_MOVE          1   /*  Mouse movements              */
#define _CLIP_INKEY_LDOWN         2   /*  Mouse left button down       */
#define _CLIP_INKEY_LUP           4   /*  Mouse left button up         */
#define _CLIP_INKEY_RDOWN         8   /*  Mouse right button down      */
#define _CLIP_INKEY_RUP          16   /*  Mouse right button up        */
#define _CLIP_INKEY_MDOWN        32   /*  Mouse middle button down      */
#define _CLIP_INKEY_MUP          64   /*  Mouse middle button up        */
#define _CLIP_INKEY_KEYBOARD    128   /*  Keyboard events              */
#define _CLIP_INKEY_ALL         255	/* 159 */


void _clip_hash_name(ClipMachine * mp, long hash, char *buf, int buflen);

/* item MUST be malloc'ed */
void _clip_store_item(ClipMachine * mp, long hash, void *item);
void _clip_store_item_destroy(ClipMachine * mp, long hash, void *item, void (*destroy) (void *));
void _clip_free_item(ClipMachine * mp, long hash);
void _clip_remove_item(ClipMachine * mp, long hash);
void *_clip_fetch_item(ClipMachine * mp, long hash);

/* container */
void *_clip_fetch_c_item( ClipMachine *cm, int key, int type );
int _clip_destroy_c_item( ClipMachine *cm, int key, int type );
int _clip_store_c_item( ClipMachine *cm, void *item, int type, void (*destroy)(void*) );

void *_clip_fetch_c_item_type( ClipMachine *cm, int type, int *key ); /* first item of type */

#define CLIP_EPOCH_DEFAULT 1930
#define CLIP_DATEFORMAT_DEFAULT "mm/dd/yyyy"
/* if dateformat have 4th "Y" - century have "true" */
#define CLIP_CENTURY_DEFAULT 1

long _clip_str_to_date(char *str, char *format, int epoch);
char *_clip_date_to_str(long date, char *format);
void _clip_datetostr(long date, char *buf); /* as DTOS */

int _clip_ctot(ClipMachine * mp, char* ctime, long *date, long *time, char* format);
char* _clip_ttoc(ClipMachine *mp, long julian, long time, int *retlen, char* date_format, int hours, int seconds);

/* return size of matched portion; -1 if fail */
int _clip_glob_match(const char *string, const char *pattern, int caseflag);

int _clip_translate_path(ClipMachine * mp, const char *string, char *buf, int buflen);

void _clip_unix_path(char* p,int tolow);
int _clip_absolute_path(ClipMachine* cm,const char* path,char* p,int len);
int _clip_path(ClipMachine* cm,const char* fn,char* p,int len,int create);
int _dos_path(ClipMachine* cm,const char* fn,char* p,int len);

#define CLIP_UNDEF_VAR(varp)  memset((varp),0,sizeof(ClipVar))

void _clip_push_func(struct ClipMachine *mp, ClipFunction f, int nlocals, int nolocals);
void _clip_mptr(ClipMachine * mp, ClipVar * refs, int num);
void _clip_set_deleted(ClipMachine * mp, int value);

int _clip_type(ClipVar * vp);
ClipVar *_clip_vptr(ClipVar * vp);
void _clip_log_call(ClipMachine * mp);
void _clip_log_init(char *filename);
void _clip_out_log(char *buf, int len);

int _clip_errorblock(ClipMachine * mp, ClipVar * vp, int genCode);
int _clip_errorblock_res(ClipMachine * mp, ClipVar * vp, int genCode, ClipVar *res);

int _clip_call_errblock(ClipMachine * mp, int r);

/* create the Error object */
ClipVar *_clip_new_error(ClipMachine * mp,
			 const char *description, int severity,
			 int genCode, int osCode,
			 int canDefault, int canRetry, int canSubstitute,
			 int tries,
			 const char *subSystem, int subCode, const char *operation
);

void _clip_flush_log();
char *_clip_unix_name(ClipMachine * cm, char *dname);
int clip___QUIT(ClipMachine * mp);

void _clip_generr(ClipMachine * mp, int code);
const char *_clip_errname(int code);
void _clip_math_operation(ClipMachine *mp, int op, ClipVar * Lvar, ClipVar * Rvar);

int _clip_forstep(ClipMachine *mp, int *_if);
int _clip_map_first(ClipMachine * mp, int keys, int *_if);
int _clip_map_next(ClipMachine * mp, int keys, int *_if);

int _clip_get_function(ClipMachine * mp, long hash, ClipFunction ** fpp, ClipBlock ** bpp);

int _clip_restore_tty(ClipMachine *mp);
int _clip_init_tty(ClipMachine *mp);
int _clip_load_inits(ClipMachine *mp, ClipFile *file);

void _clip_swap(ClipMachine *mp, int offset); /* move sp-offset-1 to sp-1 location*/
int _clip_putenv(char *name);
int _clip_put_env(char *name, char *val);
char *_clip_getenv(char *name);
extern char *CLIPROOT;
extern char *CLIP_LOCALE_ROOT;

void _clip_add_locale(char *locale);
void _clip_locale_msg(char *module, char *msg, char **dst);
void _clip_locale_msg_plural(char *module, char *msg, char *pl, long n, char **dst);
int _clip_module_locale(char *module, char *filename);


int _clip_rddfieldno(ClipMachine * mp, int rddno, long namehash);
int _clip_rddfield(ClipMachine * mp, int rddno, int fieldno);

int _clip_line(ClipMachine *mp);
int _clip_debug(ClipMachine *mp);
void _clip_sigdebug(int sig);
void _clip_sigint(int sig);
void _clip_sigint_real(int sig);
extern FILE *_clip_dbg_in;
extern FILE *_clip_dbg_out;
void _clip_print_dbg(ClipMachine * mp, ClipVar * vp);

typedef struct VarEntry
{
	long hash;
	ClipVar var;
	struct VarEntry *next;
}
VarEntry;

void _clip_hash_buckets(ClipMachine *mp, ClipFile *file);

typedef struct ClipBreakPoint
{
	char *filename;
	int line;
	char *procname;
}
ClipBreakPoint;

extern ClipBreakPoint *_clip_breakpoint;
extern int _clip_debuglevel;
extern int _clip_debugnext;
void _clip_in_breakpoint(void);
char *_clip_type_name(ClipVar * vp);
int _clip_uudecode(char *sstr, long l, char **strp, long *lenp);
int _clip_uuencode(char *sstr, long l, char **strp, long *lenp, int without_newline);

void _clip_var2str(ClipMachine * mp, ClipVar * vp, char **strp, long *lenp, int method);
void _clip_str2var(ClipMachine * mp, ClipVar * vp, char *str, long len, int method);
void _clip_dtos(double d, char *buf, int buflen, int *dp);
char * _clip_strFunc(ClipMachine * mp,ClipVar *v,int len, int dec, int pad);
int _clip_dtostr(char* buf,int len,int dec,double d,int zero);
double _clip_strtod_base(char *str, int base);
double _clip_strtod(char *str, int *decpos);
int _clip_fileStrModeToNumMode(char *mode);

int _clip_clip(ClipMachine * mp, const char *funcname, int argc, ClipVar * stackp, ClipVar * retp);
void _clip_destroy_locals(ClipMachine *mp);

int _clip_parse_name(ClipMachine * mp, char *name, int l, char **anamep, int *alp,
		char **fnamep, int *flp, long **dimp, int *ndimp);

#define CLEAR_CLIPVAR(vp) memset((vp),0,sizeof(ClipVar))

ClipFieldDef *_clip_get_fielddef(ClipMachine *mp, long areahash, long namehash);

int _clip_catstr(ClipMachine *mp, int num);
int _clip_quot(ClipMachine *mp);

int _clip_strcmp(const char *str1, const char *str2);
int _clip_strncmp(const char *str1, const char *str2, int len);
int _clip_strcasecmp(const char *str1, const char *str2);
int _clip_strncasecmp(const char *str1, const char *str2, int len);

int _clip_strnncmp(const char *str1, const char *str2, int len1, int len2);
int _clip_strnncasecmp(const char *str1, const char *str2, int len1, int len2);

const char *_clip_strstr(const char *src, int slen, const char *dst, int dlen);

extern char *_clip_hostcs;
int _clip_translate_charset(char *p1, char *p2, unsigned char *str
	, unsigned char *ostr, int len);

#ifdef USE_TASKS
	#define select(p1,p2,p3,p4,p5) clip_task_select_if(p1,p2,p3,p4,p5)
	int clip_task_select_if(int,void*,void*,void*,void*);
#endif

void _clip_init_localvars(ClipMachine *mp, ClipVarFrame **plocalvars, int num);

int _clip_creat(ClipMachine* cm,char *file, int flags, mode_t mode, int exclusive);
int _clip_open(ClipMachine* cm,char *file, int flags, mode_t mode, int exclusive);
int _clip_close(ClipMachine* cm,long hash,int fd);

#ifdef OS_CYGWIN
	struct timeval;
#endif
int _clip_select(int n, fd_set *rfds, fd_set *wfds, fd_set *efds, struct timeval *tv);
int _clip_read(C_FILE *cf, void *buf, size_t count);
int _clip_write(C_FILE *cf, void *buf, size_t count);
void destroy_c_file(void *item);

char * _clip_host_charset();

#ifndef O_BINARY
#define O_BINARY 0
#endif

void _clip_check_stack(ClipMachine *mp);

#ifdef WITH_CHECK_STACK

#define CLIP_CHECK_STACK _clip_check_stack(mp)

#else

#define CLIP_CHECK_STACK

#endif

void _clip_fullscreen(ClipMachine * mp);

char *_clip_gettext(const char *msg);

int _clip_start_profiler(ClipMachine *mp);
int _clip_stop_profiler(ClipMachine *mp);

/* for manual call */
int _clip_start_profiler_name(ClipMachine *mp, const char *procname, const char *filename);
int _clip_stop_profiler_name(ClipMachine *mp, const char *procname, const char *filename);

ClipVar * _clip_add_tempvar(ClipMachine *mp, ClipVar *vp);

#define CLIP_LOCK_FLOCK     0x01
#define CLIP_LOCK_ONEBYTE   0x00
#define CLIP_LOCK_WRITE     0x02
#define CLIP_LOCK_READ      0x00
#define CLIP_LOCK_HILEVEL   0x04
#define CLIP_LOCK_LOWLEVEL  0x00
#define CLIP_LOCK_WAIT      0x08
#define CLIP_LOCK_NOWAIT    0x00

int _clip_setlock(ClipMachine* cm,long hash,int fd,off_t pos,int flags);
int _clip_unlock(ClipMachine* cm,long hash,int fd,off_t pos,int flags);

#endif
