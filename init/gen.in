#!/bin/sh -ue
#set >$(date +%s).configure.$LINENO.set.txt
#
#
# this file is called if configure has not neen run
#
# initialises (private) all "batch" variables used in all subfiles
#
source config/functions.f.sh
export V="v"
export Clip_M_Dir="$PWD"
cd ..
export Clip_H_Dir="$PWD"
cd "$Clip_M_Dir"
export MAKE=$(type -p gmake)
[ -z $MAKE ] && export MAKE=$(type -p make)
[ -d $Clip_M_Dir/temp ] || mkdir -p$V $Clip_M_Dir/temp
[ -d $Clip_M_Dir/log ] || mkdir -p$V $Clip_M_Dir/log
export MAKE="$MAKE $*"
export Clip_C_Dir="$Clip_M_Dir/config"
export Clip_S_Dir="$Clip_C_Dir/setup"
export Clip_S_Bin="$Clip_M_Dir/bin"
echo "loading functions" >&0
export ARCH=$(GetArch 0)
if [ -f $Clip_S_Dir/ReleaseDir.setup.ini ] ; then
	export ReleaseDir="$(cat $Clip_S_Dir/ReleaseDir.setup.ini)"
else
	export ReleaseDir=""
fi
if [ -z $ReleaseDir ] ; then
	export ReleaseDir="$Clip_H_Dir"
fi
if [ -n $HOSTTYPE ] ; then
	export C64=$HOSTTYPE
else
	export C64=$(uname -m)
fi
export ARCH="i586"
if [ -f $Clip_S_Dir/ARCH.setup.ini ] ; then
	export ARCH=$(cat "$Clip_S_Dir/ARCH.setup.ini")
fi
for nii in $ARCH ; do
	export ARCH=$nii
done
if [[ $ARCH = "x86_64" ]] && [[ $C64 = "x86_64" ]]; then
	export ARCH="x86_64"
	export C64="64"
	echo "$ReleaseDir" >$Clip_S_Dir/ReleaseDir.setup.ini
	export CLIPROOT="$ReleaseDir/clip64"
	export ReleaseDir="$ReleaseDir/clip64"
	export Suff_Exe="64"
	export Suff_Script="64.sh"
else
	export ARCH="i586"
	export C64=""
	echo "$ReleaseDir" >$Clip_S_Dir/ReleaseDir.setup.ini
	export CLIPROOT="$ReleaseDir/clip32"
	export ReleaseDir="$ReleaseDir/clip32"
	export Suff_Exe="32"
	export Suff_Script="32.sh"
fi

export Clip_I_Dir="$CLIPROOT/include"
export Clip_L_Dir="$CLIPROOT/lib$C64"
export Clip_B_Dir="$CLIPROOT/bin"
[ -d $Clip_B_Dir ] 	|| mkdir -p$V $Clip_B_Dir
cp -fu$V config/* $Clip_B_Dir 	|| true
#export PATH="$PATH:$Clip_B_Dir"
export ADD_CFLAGS="-fPIC"
export ADDLIBS=""
export AS_PRG="as"
export BINDIR="$HOME/bin"
export CC=$(type -p gcc)
export C_FLAGS=""
export CHECK_STACK="no"
export Clip="$Clip_B_Dir/clip$Suff_Exe"
#export Clipar="$Clip_B_Dir/clipar$Suff_Exe"
export Clip_B_Dir="$CLIPROOT/bin"
export Clip_C_Dir="$Clip_M_Dir/config"
export Clipcfg_h="$CLIPROOT/include/clipcfg.h"
#export Clip_cld="$Clip_B_Dir/clip_cld$Suff_Exe"
#export Clip_conv="$Clip_B_Dir/clip_conv$Suff_Exe"
export Clip_cp="$Clip_B_Dir/clip_cp$Suff_Script"
export Clip_D_Dir="$CLIPROOT/doc"
#export Clip_dbg="$Clip_B_Dir/clip_dbg$Suff_Exe"
#export Clip_debugger="$Clip_B_Dir/clip_cld$Suff_Exe"
export CLIP_DLLEXPORT=""
export CLIP_DLLIMPORT=""
export Clip_F_CFG="$Clip_B_Dir/functions.cfg"
export Clip_F_F="$Clip_B_Dir/functions.f.sh"
export CLIP_FLAGS=""
export Cliphash="$Clip_B_Dir/cliphash$Suff_Exe"
#export Clip_hashextract="$Clip_B_Dir/clip_hashextract$Suff_Exe"
export Clip_I_Dir="$CLIPROOT/include"
export Clip_L_Dir="$CLIPROOT/lib$C64"
export CLIP_LIB="-L$Clip_L_Dir -lclip"
export ClipLibrary="$Clip_L_Dir/libclip.so"
export CliplibsVerbose="v"
export Clip_makelib="$Clip_B_Dir/clip_makelib$Suff_Script"
export Clip_makeslib="$Clip_B_Dir/clip_makeslib$Suff_Script"
export Clip_M_Dir="$PWD"
export Clip_msgfmt="$Clip_B_Dir/clip_msgfmt$Suff_Script"
export Clip_msgmerge="$Clip_B_Dir/clip_msgmerge$Suff_Script"
export CLIP_NAMES="yes"
export CLIP_ROOT="$CLIPROOT"
export Clip_S_Dir="$Clip_C_Dir/setup"
export CLIP_TASKS=""
export Clip_T_Dir="$Clip_M_Dir/temp"
#export Clip_trans="$Clip_B_Dir/clip_trans$Suff_Exe"
export ClipVerbose="v"
export CONFIGURE_SH="error"
export CONFIGURE="./configure"
export CONFIGURE_DIR="$Clip_B_Dir/configure_dir.sh"
export DBG_LIB=""
export DEBUGFLAGS="-g"
export Debug_Make="1"
export DLLIB="-ldl"
export DLLLIBSUFF=".a"
export DLLREALSUFF='.so'
export DLLSUFF='.so'
export Edit=""
# 		insert file names to remove (clean) in the file init/Makefile.gen.in
# 		under the rules "clean"
export FILES_TO_REMOVE=""
export FORCEALIGN=""
#export Genlist="$Clip_B_Dir/genlist$Suff_Exe"
#export GenMakefile="$Clip_M_Dir/init/Makefile.gen.in"
#export Gen_tbl="$Clip_B_Dir/gen_tbl$Suff_Exe"
export Hash_Dir="$Clip_M_Dir/hasher/hashed"
export HAVE_ICONV=""
export ICONV_LIB=""
export ICONV_LIB_DIR=""
export INSTDIR="$ReleaseDir"
export LD_END=""
export LD_PRG=""
export LDS_END=""
export LDS_PRG=""
export LIBC=$(AllUpper $(libcver))
export LibDir="/lib$C64/"
export Makefile_01_in="$Clip_M_Dir/init/Makefile.01.in"
export Makefile_gen_in="$Clip_M_Dir/init/Makefile.gen.in"
export M_DBG=""
export MEMDEBUG_LEVEL=0
export M_LIB=""
export MultiFile="n"
export NM_PRG="nm"
export NM_UNDERSCORE=""
export NO_GETTEXT=""
export OPTFLAGS=-o
export OSNAME=$(AllUpper $(uname -s))
export OS_$OSNAME="yes"
export OS_NAME=$OSNAME
export PKGCONFIG="pkg-config"
export PO_BINS=""
#export Po_compat="$Clip_B_Dir/po_compat$Suff_Exe"
#export Po_extr="$Clip_B_Dir/po_extr$Suff_Exe"
export PO_FROM_COMPAT=""
#export Po_subst="$Clip_B_Dir/po_subst$Suff_Exe"
export PO_TO_COMPAT=""
export PrgVerbose="v"
export ReadLineLibs=""
export READLINE_LIBS=""
export RealArch=$(uname -m)
export StandardDepend="./configure.in Makefile"
export STATICLINK=""
export StdIncDir="/usr/include"
export StdLibDir="/usr/lib$C64"
export STD_LIBDIR='yes'
export STD_LIB_DIR="/usr/local/lib"
export TERMCAP=""
export U_Name=$(uname -s)
export USE_AS="yes"
export USE_GTK="yes"
export USE_GTK2="yes"
export USE_GTK_EXTRA="yes"
export USE_LD="yes"
export USE_MEMDBG="no"
export USE_TASKS="yes"
export USE_WCHARS="yes"
export U_Ver=$(uname -r)
export Version="unknown"
if [ -f "$Clip_C_Dir/Version.cfg" ] ; then
	export Version=$(cat "$Clip_C_Dir/Version.cfg")
fi
export WaitForCheck="z"
export WAIT_SECONDS=0
export XC_CFLAGS=
export XCLIP=''
export XPM_LIB="-lXpm -lX11"
export YACC="bison"
export LogFileNr=0
export LogFileLog="$Clip_T_Dir/compile.log.$LogFileNr.sh"
while [ -f $LogFileLog ] ; do
	let ++LogFileNr
	export LogFileLog="$Clip_T_Dir/compile.log.$LogFileNr.sh"
done
export LogFileErr="$Clip_T_Dir/compile.err.$LogFileNr.sh"
export LogFileLog="$Clip_T_Dir/compile.log.$LogFileNr.sh"
#
##	schema values supersided when needed in each directory
#
[ -d $Clip_I_Dir ] 	|| mkdir -p$V $Clip_I_Dir
[ -d $Clip_L_Dir ] 	|| mkdir -p$V $Clip_L_Dir
[ -d $Hash_Dir ] 		|| mkdir -p$V $Hash_Dir
source $Clip_C_Dir/GetEdit.sh
export Edit=$(cat "$Clip_S_Dir/Edit.setup.ini" )
export MultiFile=$(cat "$Clip_S_Dir/MultiFile.setup.ini" )
export Version=$(cat "$Clip_C_Dir/Version.cfg")
export release_date=""
if ! [ -f "$Clip_C_Dir/release_date" ] ; then
	[ -x ../clip-devel/config/make.release.sh ] && ../clip-devel/config/make.release.sh
fi
export release_date=$(cat "$Clip_C_Dir/release_date")
export release_version=""
if ! [ -f "$Clip_C_Dir/release_version" ] ; then
	[ -x ../clip-devel/config/make.release.sh ] && ../clip-devel/config/make.release.sh
fi
export release_version=$(cat "$Clip_C_Dir/release_version")
export sequence_release=""
if ! [ -f "$Clip_C_Dir/sequence_release" ] ; then
	[ -x ../clip-devel/config/make.release.sh ] && ../clip-devel/config/make.release.sh
fi
export sequence_release=$(cat "$Clip_C_Dir/sequence_release")
export sequence_date=""
if ! [ -f "$Clip_C_Dir/sequence_date" ] ; then
	[ -x ../clip-devel/config/make.release.sh ] && ../clip-devel/config/make.release.sh
fi
export sequence_date=$(cat "$Clip_C_Dir/sequence_date")
export seq_no=""
if ! [ -f "$Clip_C_Dir/seq_no" ] ; then
	[ -x ../clip-devel/config/make.release.sh ] && ../clip-devel/config/make.release.sh
fi
export seq_no=$(cat "$Clip_C_Dir/seq_no")
#
# 		processor architecture & environment
# 		ARCH is uppercase
# 		RealArch is normal string command : $uname -m
# 			compiler's environment
#
# short filename
#
#	OnScreen 0 Line : $LINENO FILES_TO_REMOVE : $FILES_TO_REMOVE
if [ -f $Clip_S_Dir/StdIncDir.setup.ini ] ; then
	export StdIncDir="$(cat $Clip_S_Dir/StdIncDir.setup.ini )"
else
	export StdIncDir="-I . -I ./include $Clip_I_Dir"
	echo "$StdIncDir" >$Clip_S_Dir/StdIncDir.setup.ini
fi
if [ -f $Clip_S_Dir/INCLUDE_FLAGS.setup.ini ] ; then
	export INCLUDE_FLAGS="$(cat $Clip_S_Dir/INCLUDE_FLAGS.setup.ini )"
else
	export INCLUDE_FLAGS="-I . -I ./include -I $Clip_I_Dir "
	echo "$INCLUDE_FLAGS" >$Clip_S_Dir/INCLUDE_FLAGS.setup.ini
fi
#####################################################################################################
##																																	##
##			global & standard compiler's flags																			##
##																																	##
#####################################################################################################
##  schema values supersided in each directory expect INCLUDE_FLAGS
##						general flags for cc compiler
if [ -f $Clip_S_Dir/C_FLAGS.setup.ini ] ; then
	export C_FLAGS="$(cat $Clip_S_Dir/C_FLAGS.setup.ini )"
else
	export C_FLAGS="-Wall -fPIC $INCLUDE_FLAGS"
	echo "$C_FLAGS" >$Clip_S_Dir/C_FLAGS.setup.ini
fi
if [ -f $Clip_S_Dir/C_FLAGS_GEN.setup.ini ] ; then
	export C_FLAGS_GEN="$(cat $Clip_S_Dir/C_FLAGS_GEN.setup.ini )"
else
	export C_FLAGS_GEN="$C_FLAGS"
	echo "$C_FLAGS_GEN" >$Clip_S_Dir/C_FLAGS_GEN.setup.ini
fi
##						general cc debug flags
if [ -f $Clip_S_Dir/C_FLAGS_GEN_DEBUG.setup.ini ] ; then
	export C_FLAGS_GEN_DEBUG="$(cat $Clip_S_Dir/C_FLAGS_GEN_DEBUG.setup.ini )"
else
	export C_FLAGS_GEN_DEBUG="$C_FLAGS -g"
	echo "$C_FLAGS_GEN_DEBUG" >$Clip_S_Dir/C_FLAGS_GEN_DEBUG.setup.ini
fi
##						general flags for clip compiler
if [ -f $Clip_S_Dir/CLIP_FLAGS.setup.ini ] ; then
	export CLIP_FLAGS="$(cat $Clip_S_Dir/CLIP_FLAGS.setup.ini )"
else
	export CLIP_FLAGS="--names --c-pcode --shared-exec --auto-memvar=0 --namespace-warning=1 $INCLUDE_FLAGS"
	echo "$CLIP_FLAGS" >$Clip_S_Dir/CLIP_FLAGS.setup.ini
fi
if [ -f $Clip_S_Dir/CLIP_FLAGS_GEN.setup.ini ] ; then
	export CLIP_FLAGS_GEN="$(cat $Clip_S_Dir/CLIP_FLAGS_GEN.setup.ini )"
else
	export CLIP_FLAGS_GEN="$CLIP_FLAGS"
	echo "$CLIP_FLAGS_GEN" >$Clip_S_Dir/CLIP_FLAGS_GEN.setup.ini
fi
if [ -f $Clip_S_Dir/CLIP_FLAGS_GEN_SHORT.setup.ini ] ; then
	export CLIP_FLAGS_GEN_SHORT="$(cat $Clip_S_Dir/CLIP_FLAGS_GEN_SHORT.setup.ini )"
else
	export CLIP_FLAGS_GEN_SHORT="-lrN $INCLUDE_FLAGS"
	echo "$CLIP_FLAGS_GEN_SHORT" >$Clip_S_Dir/CLIP_FLAGS_GEN_SHORT.setup.ini
fi
##						general clip debug flags
if [ -f $Clip_S_Dir/CLIP_FLAGS_GEN_DEBUG.setup.ini ] ; then
	export CLIP_FLAGS_GEN_DEBUG="$(cat $Clip_S_Dir/CLIP_FLAGS_GEN.setup.ini )"
else
	export CLIP_FLAGS_GEN_DEBUG="$CLIP_FLAGS --noremove-c"
	echo "$CLIP_FLAGS_GEN_DEBUG" >$Clip_S_Dir/CLIP_FLAGS_GEN_DEBUG.setup.ini
fi
if [ -f $Clip_S_Dir/CLIP_FLAGS_GEN_DEBUG_SHORT.setup.ini ] ; then
	export CLIP_FLAGS_GEN_DEBUG_SHORT="$(cat $Clip_S_Dir/CLIP_FLAGS_GEN_SHORT.setup.ini )"
else
	export CLIP_FLAGS_GEN_DEBUG_SHORT="$CLIP_FLAGS_GEN_SHORT -R"
	echo "$CLIP_FLAGS_GEN_DEBUG_SHORT" >$Clip_S_Dir/CLIP_FLAGS_GEN_DEBUG_SHORT.setup.ini
fi
#################################		(clip directory)
#################################		cc compiler suggestions
export C_CLIP_FLAGS="$C_FLAGS_GEN"
export C_CLIP_FLAGS_DEBUG_LEVEL=0
export C_CLIP_FLAGS_OPTIMISE_LEVEL=3
export C_CLIP_FLAGS_VERBOSITY=""
#################################		clip compiler suggestions
export ClipVerbose="v"
export CLIP_CLIP_FLAGS="--optimise=3 --verbose=0 --debug=0 $CLIP_FLAGS_GEN"
export CLIP_CLIP_FLAGS_DEBUG_LEVEL=0
export CLIP_CLIP_FLAGS_OPTIMISE_LEVEL=3
export CLIP_CLIP_FLAGS_VERBOSITY=0
##						for test & debug purposes
export C_DEBUG_CLIP_FLAGS="-O0 -g3 --verbose $C_FLAGS_GEN_DEBUG"
export C_DEBUG_CLIP_FLAGS_DEBUG_LEVEL=3
export C_DEBUG_CLIP_FLAGS_OPTIMISE_LEVEL=0
export C_DEBUG_CLIP_FLAGS_VERBOSITY=1
export CLIP_DEBUG_CLIP_FLAGS="--noremove-c --debug=3 --optimise=0 --verbose=6 $CLIP_FLAGS_GEN_DEBUG"
export CLIP_DEBUG_CLIP_FLAGS_DEBUG_LEVEL=3
export CLIP_DEBUG_CLIP_FLAGS_OPTIMISE_LEVEL=0
export CLIP_DEBUG_CLIP_FLAGS_VERBOSITY=6
#################	cliplibs directory
export CliplibsVerbose="v"
export C_CLIPLIBS_FLAGS="$C_FLAGS_GEN"
export C_CLIPLIBS_FLAGS_DEBUG_LEVEL=0
export C_CLIPLIBS_FLAGS_OPTIMISE_LEVEL=0
export C_CLIPLIBS_FLAGS_VERBOSITY=""
export CLIP_CLIPLIBS_FLAGS="--optimise=3 --verbose=0 --debug=0 $CLIP_FLAGS_GEN"
export CLIP_CLIPLIBS_FLAGS_DEBUG_LEVEL=0
export CLIP_CLIPLIBS_FLAGS_OPTIMISE_LEVEL=3
export CLIP_CLIPLIBS_FLAGS_VERBOSITY=0
##  for test purposes
export C_DEBUG_CLIPLIBS_FLAGS="-O0 -g3 --verbose $C_FLAGS_GEN_DEBUG"
export C_DEBUG_CLIPLIBS_FLAGS_DEBUG_LEVEL=3
export C_DEBUG_CLIPLIBS_FLAGS_OPTIMISE_LEVEL=0
export C_DEBUG_CLIPLIBS_FLAGS_VERBOSITY=1
export CLIP_DEBUG_CLIPLIBS_FLAGS="--debug=3 --optimise=0 --verbose=6 $CLIP_FLAGS_GEN_DEBUG"
export CLIP_DEBUG_CLIPLIBS_FLAGS_DEBUG_LEVEL=3
export CLIP_DEBUG_CLIPLIBS_FLAGS_OPTIMISE_LEVEL=0
export CLIP_DEBUG_CLIPLIBS_FLAGS_VERBOSITY=6
###############	prg directory
export PrgVerbose="v"
export C_PRG_FLAGS="$C_FLAGS_GEN"
export C_PRG_FLAGS_DEBUG_LEVEL=0
export C_PRG_FLAGS_OPTIMISE_LEVEL=3
export C_PRG_FLAGS_VERBOSITY=""
export CLIP_PRG_FLAGS="--optimise=3 --verbose=0 --debug=0 $CLIP_FLAGS_GEN"
export CLIP_PRG_FLAGS_DEBUG_LEVEL=0
export CLIP_PRG_FLAGS_OPTIMISE_LEVEL=3
export CLIP_PRG_FLAGS_VERBOSITY=0
##  for test purposes
export C_DEBUG_PRG_FLAGS="-O -g3 --verbose $C_FLAGS_GEN_DEBUG"
export C_DEBUG_PRG_FLAGS_DEBUG_LEVEL=3
export C_DEBUG_PRG_FLAGS_OPTIMISE_LEVEL=0
export C_DEBUG_PRG_FLAGS_VERBOSITY=1
export CLIP_DEBUG_PRG_FLAGS="--debug=3 --optimise=0 --verbose=6 $CLIP_FLAGS_GEN_DEBUG"
export CLIP_DEBUG_PRG_FLAGS_DEBUG_LEVEL=3
export CLIP_DEBUG_PRG_FLAGS_OPTIMISE_LEVEL=0
export CLIP_DEBUG_PRG_FLAGS_VERBOSITY=6
###############	config directory
export C_CONFIG_FLAGS="-O3 $C_FLAGS_GEN"
export CLIP_CONFIG_FLAGS="--optimise=3 --verbose=0 --debug=0 $CLIP_FLAGS_GEN"
##  for test purposes
export C_DEBUG_CONFIG_FLAGS="-O -g3 --verbose $C_FLAGS_GEN_DEBUG"
export CLIP_DEBUG_CONFIG_FLAGS="--debug=3 --optimise=0 --verbose=6 $CLIP_FLAGS_GEN_DEBUG"
####				end
export C_DEBUG_TEST_FLAGS=$C_DEBUG_PRG_FLAGS
export C_TEST_FLAGS=$C_PRG_FLAGS
export CLIP_DEBUG_TEST_FLAGS=$CLIP_DEBUG_PRG_FLAGS
export CLIP_TEST_FLAGS=$CLIP_PRG_FLAGS
cd "$Clip_M_Dir"
cp -fpu$V init/Makefile.gen.in $Clip_I_Dir/
#! [ -f $Clip_F_CFG ] 					&& source "$Clip_C_Dir//init_Mkfile.sh"
#! [ -f $Clip_M_Dir/Makefile.ini ] 	&& source "$Clip_C_Dir/init_Mkfile.sh"
#! [ -f $Clip_M_Dir/configure.ini ] 	&& source "$Clip_C_Dir/init_Mkfile.sh"

export C_FLAGS="$(cat $Clip_S_Dir/C_FLAGS.setup.ini )"
export C_FLAGS_GEN="$(cat $Clip_S_Dir/C_FLAGS_GEN.setup.ini )"
export C_FLAGS_GEN_DEBUG="$(cat $Clip_S_Dir/C_FLAGS_GEN_DEBUG.setup.ini )"

export CLIP_FLAGS="$(cat $Clip_S_Dir/CLIP_FLAGS.setup.ini )"
export CLIP_FLAGS_GEN="$(cat $Clip_S_Dir/CLIP_FLAGS_GEN.setup.ini )"
export CLIP_FLAGS_GEN_SHORT="$(cat $Clip_S_Dir/CLIP_FLAGS_GEN_SHORT.setup.ini )"
export CLIP_FLAGS_GEN_DEBUG="$(cat $Clip_S_Dir/CLIP_FLAGS_GEN.setup.ini )"
export CLIP_FLAGS_GEN_DEBUG_SHORT="$(cat $Clip_S_Dir/CLIP_FLAGS_GEN_SHORT.setup.ini )"
export INCLUDE_FLAGS="$(cat $Clip_S_Dir/INCLUDE_FLAGS.setup.ini )"
export StdIncDir="$(cat $Clip_S_Dir/StdIncDir.setup.ini )"
export List=""
if [ -f "$Clip_S_Dir/Makefile.setup.ini" ] ; then
	export List="$(cat $Clip_S_Dir/Makefile.setup.ini )"
fi
export Flagger=0
for nii in $List ; do
	export xx="$(cat $Clip_S_Dir/$nii.setup.ini)"
	export "$nii=\"$xx\""
done
#
#ClipParameters="$(General_Parameter_For_clip_dir)"
#
if [ -f "$Clip_S_Dir/clip.setup.ini" ] ; then
	export List="$(cat $Clip_S_Dir/clip.setup.ini )"
fi
for nii in $List ; do
	export xx="$(cat $Clip_S_Dir/$nii.setup.ini)"
	export "$nii=\"$xx\""
done
#
#		CliplibsParameters=$(General_Parameter_For_cliplibs_dir)
#
if [ -f "$Clip_S_Dir/cliplibs.setup.ini" ] ; then
	export List="$(cat $Clip_S_Dir/cliplibs.setup.ini )"
fi
for nii in $List ; do
	export xx="$(cat $Clip_S_Dir/$nii.setup.ini)"
	export "$nii=\"$xx\""
done

#
#		PrgParameters=$(General_Parameter_For_prg_dir)
#
if [ -f "$Clip_S_Dir/prg.setup.ini" ] ; then
	export List="$(cat $Clip_S_Dir/prg.setup.ini )"
fi
for nii in $List ; do
	xx="$(cat $Clip_S_Dir/$nii.setup.ini)"
	export "$nii=\"$xx\""
done
#cp -fpu$V $Clip_M_Dir/config/functions.f.sh $Clip_B_Dir/
# || true
#cp -fpu$V $Clip_M_Dir/config/configure_dir.sh $Clip_B_Dir/
# || true
#rm -f$V $Clip_B_Dir/Makefile 		$Clip_B_Dir/configure 		|| true
#rm -f$V $Clip_B_Dir/Makefile.in 	$Clip_B_Dir/configure.in 	|| true
#rm -f$V $Clip_B_Dir/Makefile.ini $Clip_B_Dir/configure.ini 	|| true
#rm -f$V $Clip_B_Dir/Makefile.01 	$Clip_B_Dir/configure.in 	|| true
