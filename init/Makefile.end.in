##
##										init/Makefile.end.in
##
##				called from all Makefile files
##
#
# 				file called at the end of each Makefile except MAIN Makefile
#

################################################################################################################

./configure : ./configure.in
	$(E_xx)$(CONFIGURE_SH)

Makefile.ini : $(CONFIGURE_SH)
	$(E_e)$(Trace)
	$(E_cp)cp --remove-destination -fpu$(V) ../configure.ini ../Makefile.ini ./
	$(E_xx)$(CONFIGURE_SH)

Makefile : Makefile.in Makefile.ini ../Makefile.ini ./configure.in ./configure $(Local_Depend) $(wildcard *.g)
	$(E_e)$(Trace)
	$(E_cp)cp --remove-destination -fpu$(V) ../Makefile.ini ../configure.ini ./
	$(E_if)( [ -f Makefile.in ] && $(CONFIGURE_SH) ) || true
	$(E_e)echo $(PWD)/Makefile "is updated" >&0
	$(E_e)echo $(PWD)/Makefile "is updated" >&1

FORCE :

$(DIRS_TO_SCAN) example : Makefile FORCE
	$(E_if)if [ -d $@ ] ; then 																						\
					cd $@  																									\
						&& echo  "Scanning : " $$PWD >&0																\
						&& echo  "Scanning : " $$PWD >&1																\
						&& cp --remove-destination -fpu$(V) ../Makefile.ini ../configure.ini ./ 		\
						&& ( [ -f Makefile ] || ( [ -x $(CONFIGURE_SH) ] && $(CONFIGURE_SH) ) )			\
						&& $(MAKE) $(MAKEFLAGS) $(ADDMAKECMDGOALS) $(MAKECMDGOALS) ;						\
		fi

M_config : Makefile cleanc cfg $(DIRS_TO_SCAN) example FORCE
	$(E_if)[ -d ./include.clip ] || ln -sf$(V) $(Clip_I_Dir) ./include.clip
	$(E_cp)cp --remove-destination -fpu$(V) ../Makefile.ini ../configure.ini ./
	$(E_if)[ -f Makefile ] || $(CONFIGURE_SH)
	$(E_e)echo "Config for " $(PWD) "is Ok" >&0
	$(E_e)echo "Config for " $(PWD) "is Ok" >&1

distclean : $(DIRS_TO_SCAN) example distcleanc clean
	$(E_rm)rm -f$(V) *.g *.ok *.no

uninstall : distclean

clean : $(DIRS_TO_SCAN) example cleanc
	$(E_rm)rm -f$(V) 	$(sort 	*~ *.a *.BAK *.bak *.cdx *.config.txt *.dll 						\
										*.ex *.exe *.EXE *.export *.idx *.nm *.ntx 						\
										*.o *.output *.pa *.po *.ppo *.s *.so *.t *.sav 				\
										*.tmp *.uri a.out compile.*.sh set.txt *.set.txt 				\
										*.log configure.ini Makefile.ini *.set								\
										Makefile.01 Makefile.02 make2 include locale.po charsets 	\
										dummy.c include.clip 						 							) || true
	$(E_if)( [ -f Makefile.in ] && rm -f$(V) Makefile ) || true
	$(E_if)( [ -f configure.in ] && rm -f$(V) configure ) || true
	$(E_rm)rm -f$(V) Makefile.ini configure.ini

$(ATARGET) : $(OBJS) $(ADDOBJS) Makefile $(CLIP)
	$(E_e)$(Trace_lib)
	$(E_rm)rm -f$(V) $(TARGET).*
	$(E_c_mkl)$(CLIP_MAKELIB) $@ $(OBJS) $(ADDOBJS) $(ADDLIBS)

$(RTARGET) : $(ATARGET) Makefile $(CLIP) $(LIBCLIP)
	$(E_e)$(Trace_lib)
	$(E_rm)rm -f$(V) $@
	$(E_c_mkSl)$(CLIP_MAKESLIB) $@ $< $(ADDLIBS)

ifneq ($(RTARGET), $(STARGET))

$(STARGET) : $(RTARGET) Makefile $(CLIP) $(LIBCLIP)
	$(E_e)$(Trace_lib)
	$(E_rm)rm -f$(V) $@
	$(E_c_mkSl)$(CLIP_MAKESLIB) $@ $(ATARGET) $(ADDLIBS)
endif

$(ATARGET2) : $(OBJS2) $(ADDOBJS2) Makefile $(CLIP)
	$(E_e)$(Trace_lib2)
	$(E_rm)rm -f$(V) $(TARGET2).*
	$(E_c_mkSl)$(CLIP_MAKELIB) $@ $(OBJS2) $(ADDOBJS2) $(ADDLIBS2)

$(RTARGET2) : $(ATARGET2) Makefile $(CLIP) $(LIBCLIP)
	$(E_e)$(Trace_lib2)
	$(E_rm)rm -f$(V) $@
	$(E_c_mkSl)$(CLIP_MAKESLIB) $@ $< $(ADDLIBS2)

ifneq ($(RTARGET2), $(STARGET2))

$(STARGET2) : $(RTARGET2) Makefile $(CLIP) $(LIBCLIP)
	$(E_e)$(Trace_lib2)
	$(E_rm)rm -f$(V) $@
	$(E_c_mkSl)$(CLIP_MAKESLIB) $@ $< $(ADDLIBS2)

endif

install-lib :
	$(E_cp)$(CLIP_CP) $(TARGET) $(Clip_L_Dir)/
	$(E_if)( [[ $(PROG2) != "xyz2" ]] && $(CLIP_CP) $(TARGET2) $(Clip_L_Dir)/ ) || true

install-example :
	$(E_if)[ -d example ] && mkdir -p$(V) $(Clip_D_Dir)/example/$(PROG)
	$(E_if)[ -d example ] && cp --remove-destination -Rfpu$(V) example/* $(Clip_D_Dir)/example/$(PROG)/

install-doc : $(DOC)
	$(E_mkD)mkdir -p$(V) $(Clip_D_Dir)/$(PROG)
	$(E_cp)cp --remove-destination -Rfpu$(V) $(DOC) $(Clip_D_Dir)/$(PROG)/
