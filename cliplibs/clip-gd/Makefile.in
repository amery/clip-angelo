#
#                                            clip-gd/Makefile.in
#
Local_Depend 		= 			include/*.ch 	\
									include/*.h
PROG 					= 			clip-gd
c_files 				= 									\
									_gd.c
prg_files 			=									\
									bggraph.prg  		\
									bgtools.prg  		\
									circle.prg  		\
									gd_obj.prg  		\
									hist3d.prg  		\
									histcumul.prg  	\
									histnorm.prg  		\
									hist.prg  			\
									linecumul.prg  	\
									linenorm.prg  		\
									line.prg  			\
									ring.prg

o_files 				= 			$(addsuffix .o, $(basename $(prg_files) $(c_files) ) )
DOC 					= 			doc/*
LIBGD 				= 			libgd/libgd.a
ADDLIBS 				= 			$(LIBGD)
DIRS_TO_SCAN 		= 			libgd
SRC_C_files 		= 			$(sort $(c_files) )
SRC_PRG_files 		= 			$(sort $(prg_files) )
export

######################################################################################
###################################################################################### local rules

cfg : include/ci_gdcfg.h
	$(E_cp)cp --remove-destination -fpu$(V) include/ci_gdinfo.ch $(Clip_I_Dir)/

hash1 :
	$(E_xx)$(Clip_M_Dir)/init/LinkAllFiles.sh clip-gd

test_lib : include/ci_gdcfg.h
	$(E_if)if [ -f /usr/lib$(C64)/libgd.so ] ; then 																\
		echo "gdlib ok" ; 																									\
	else 																															\
		echo "Warning: Install lib$(C64)gd-static-XX.(rpm/deb) & libgd-tools -$(C64).(rpm/deb)"  		\
			&& exit 1 ; 																										\
	fi

include/ci_gdcfg.h :
	$(E_xx)$(CONFIGURE_SH)

all : Makefile test_lib $(DIRS_TO_SCAN) $(o_files) $(STARGET)

install : all install-lib install-example install-doc

cleanc:
	$(E_rm)rm -rf$(V) gd_obj.c $(TARGET).* include/ci_gdcfg.h

distcleanc :
	$(E_rm)rm -rf$(V) *.g

include $(Makefile_o_in)

include $(Makefile_end_in)

