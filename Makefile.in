#
#                                            main Makefile.in
#
#
#
#ADDMAKECMDGOALS = example
#							to initiate in /init/Makefile.02.in
## 	-i ignore errors
##
## 	--no-print-directory
## 	-s silent
## 	-r no rules
##  	-R no variables no rules
## 	-d debug info
## 	-p database info (variables)
## 	-j n  concurrent jobs
## 	-x read
#MAKEFLAGS = --warn-undefined-variables							to initiate in /init/Makefile.02.in
## 			Issue a warning message whenever `make' sees a reference to an
## 			undefined variable. 	This can be helpful when you are trying to
## 			debug makefiles which use variables in complex ways.
##
Depend_on =
#export Depend_on
#export MAKEFLAGS = --warn-undefined-variables
#export MAKEFLAGS += -Rr
#
Depend_Files = init/*
#NODBU=yes
#export NODBU MAKE CONFIGURE_SH
#export Makefile_end_in Makefile_o_in

DIRS_TO_SCAN = clip test cliplibs prg

.PHONY: deb rpm


all : $(Making)
#	cat Readme_src | more
#	$(E_e)echo
#	$(E_e)echo
#	$(E_e)echo "choose target: local system deb rpm rpm-opt tgz tbz src"
#	exit 1
	$(E_e)echo Log file : $(Clip_M_Dir)/compile.*.sh 						>&0
	$(E_e)echo Error/warning log file : $(Clip_M_Dir)/compile2.*.sh 	>&0

home : $(Clip_M_Dir)/config/home.ok
	$(E_xx)$(MAKE) install
	$(E_e)banner $@ ok 	>&1
	$(E_e)banner $@ ok 	>&0
	$(E_e)echo Log file : $(Clip_M_Dir)/compile.*.sh 						>&0
	$(E_e)echo Error/warning log file : $(Clip_M_Dir)/compile2.*.sh 	>&0

$(Clip_M_Dir)/config/home.ok :
	$(E_rm)[ -f $(Clip_M_Dir)/config/home.ok ] || $(MAKE) clean
	$(E_xx)./configure "home"
	$(E_xx)$(MAKE) M_config
	$(E_xx)touch $(Clip_M_Dir)/config/home.ok

opt : $(Clip_M_Dir)/config/opt.ok
	$(E_xx)$(MAKE) install
	$(E_e)banner $@ ok 	>&1
	$(E_e)banner $@ ok 	>&0
	$(E_e)echo Log file : $(Clip_M_Dir)/compile.*.sh 						>&0
	$(E_e)echo Error/warning log file : $(Clip_M_Dir)/compile2.*.sh 	>&0

$(Clip_M_Dir)/config/opt.ok :
	$(E_rm)[ -f $(Clip_M_Dir)/config/opt.ok ] || $(MAKE) clean
	$(E_xx)./configure "opt"
	$(E_xx)$(MAKE) M_config
	$(E_xx)touch $(Clip_M_Dir)/config/opt.ok

local : $(Clip_M_Dir)/config/local.ok
	$(E_xx)$(MAKE) install
	$(E_e)banner $@ ok 	>&1
	$(E_e)banner $@ ok 	>&0
	$(E_e)echo Log file : $(Clip_M_Dir)/compile.*.sh 						>&0
	$(E_e)echo Error/warning log file : $(Clip_M_Dir)/compile2.*.sh 	>&0

$(Clip_M_Dir)/config/local.ok :
	$(E_rm)[ -f $(Clip_M_Dir)/config/local.ok ] || $(MAKE) clean
	$(E_xx)./configure "local"
	$(E_xx)$(MAKE) M_config
	$(E_xx)touch $(Clip_M_Dir)/config/local.ok

usr.local : $(Clip_M_Dir)/config/usr.local.ok
	$(E_xx)$(MAKE) install
	$(E_e)banner $@ ok 	>&1
	$(E_e)banner $@ ok 	>&0
	$(E_e)echo Log file : $(Clip_M_Dir)/compile.*.sh 						>&0
	$(E_e)echo Error/warning log file : $(Clip_M_Dir)/compile2.*.sh 	>&0

$(Clip_M_Dir)/config/usr.local.ok :
	$(E_rm)[ -f $(Clip_M_Dir)/config/usr.local.ok ] || $(MAKE) clean
	$(E_xx)./configure "usr.local"
	$(E_xx)$(MAKE) M_config
	$(E_xx)touch $(Clip_M_Dir)/config/usr.local.ok
	$(E_e)echo Log file : $(Clip_M_Dir)/compile.*.sh 						>&0
	$(E_e)echo Error/warning log file : $(Clip_M_Dir)/compile2.*.sh 	>&0

#sys : $(Clip_M_Dir)/config/sys.ok
#	$(E_xx)$(MAKE) install
#	$(E_e)banner $@ ok 	>&0
#	$(E_e)banner $@ ok 	>&1
#	$(E_e)echo Log file : $(Clip_M_Dir)/compile.*.sh 						>&0
#	$(E_e)echo Error/warning log file : $(Clip_M_Dir)/compile2.*.sh 	>&0

#$(Clip_M_Dir)/config/sys.ok :
#	$(E_rm)[ -f $(Clip_M_Dir)/config/sys.ok ] || $(MAKE) clean
#	$(E_xx)./configure "sys"
#	$(E_xx)$(MAKE) M_config
#	$(E_xx)touch $(Clip_M_Dir)/config/sys.ok

M_config : Makefile $(DIRS_TO_SCAN) FORCE
	$(E_e)$(Trace)
	$(E_xx)touch $(Clip_M_Dir)/config/config_check.ok
	$(E_e)banner $@ ok
	$(E_e)banner $@ ok 	>&0
	$(E_e)echo Log file : $(Clip_M_Dir)/compile.*.sh 						>&0
	$(E_e)echo Error/warning log file : $(Clip_M_Dir)/compile2.*.sh 	>&0

$(Clip_M_Dir)/config/config_check.ok : Makefile $(Depend_Files)
	$(E_e)$(Trace)
	$(E_rm)rm -f$(V) $(Clip_M_Dir)/config/*.ok
	$(E_xx)./configure $(MAKECMDGOALS)
	$(E_xx)touch $(Clip_M_Dir)/config/config_check.ok
	$(E_xx)sleep 1
	$(E_xx)touch $(Clip_M_Dir)/config/$(MAKECMDGOALS).ok


install : Makefile $(DIRS_TO_SCAN)
	$(E_xx)$(CLIP_MSGMERGE)
	$(E_xx)$(CLIP_MSGFMT)
	$(E_rm)$(Clip_M_Dir)/init/CleanCVS.sh $(INSTDIR)
	$(E_rm)cd $(INSTDIR) 																															\
		&& rm -f$(V) */include.clip */*/include.clip */*/*/include.clip */*/*/*/include.clip  */*/*/*/*/include.clip 	\
		|| true
	$(E_e)banner $@ ok 				>&1
	$(E_e)banner $@ ok 				>&0
	$(E_e)echo bin to 				>&1
	$(E_e)echo bin to 				>&0
	$(E_e)echo $(Clip_B_Dir) 		>&1
	$(E_e)echo $(Clip_B_Dir) 		>&0
	$(E_e)echo "lib's to" 			>&1
	$(E_e)echo "lib's to" 			>&0
	$(E_e)echo $(Clip_L_Dir) 		>&1
	$(E_e)echo $(Clip_L_Dir) 		>&0
	$(E_e)echo *.h *.ch to 		>&1
	$(E_e)echo *.h *.ch to 		>&0
	$(E_e)echo $(Clip_I_Dir) 		>&1
	$(E_e)echo $(Clip_I_Dir) 		>&0
	$(E_e)echo doc examples to 	>&1
	$(E_e)echo doc examples to 	>&0
	$(E_e)echo $(Clip_D_Dir) 		>&1
	$(E_e)echo $(Clip_D_Dir) 		>&0
	$(E_e)echo Log file : $(Clip_M_Dir)/compile.*.sh 						>&0
	$(E_e)echo Error/warning log file : $(Clip_M_Dir)/compile2.*.sh 	>&0

cleanc :
	$(E_rm)$(Clip_M_Dir)/init/CleanLinks.sh $(Clip_M_Dir)
	$(E_rm)rm -f$(V) Makefile Makefile.ini $(Clip_M_Dir)/config/*.ok configure.ini
	$(E_rm)rm -f$(V) sys home usr.local opt config_check configure.flags set.txt *.set.txt *.set
	$(E_e)banner $@ ok 	>&1
	$(E_e)banner $@ ok 	>&0

clean : $(DIRS_TO_SCAN) cleanc
	$(E_e)banner $@ ok 	>&1
	$(E_e)banner $@ ok 	>&0
	$(E_e)echo Log file : $(Clip_M_Dir)/compile.*.sh 						>&0
	$(E_e)echo Error/warning log file : $(Clip_M_Dir)/compile2.*.sh 	>&0

distcleanc :
	$(E_rm)$(MAKE) clean
	$(E_xx)./configure "home"

distclean : distcleanc $(DIRS_TO_SCAN) example cleanc
	$(E_rm)rm -Rf$(V) $(Clip_M_Dir)/config/setup
	$(E_e)banner $@ ok 	>&1
	$(E_e)banner $@ ok 	>&0
	$(E_e)echo Log file : $(Clip_M_Dir)/compile.*.sh 						>&0
	$(E_e)echo Error/warning log file : $(Clip_M_Dir)/compile2.*.sh 	>&0

packages: clean src tgz rpm deb
	$(E_e)banner $@ ok 	>&1
	$(E_e)banner $@ ok 	>&0

lp: NODBU=no
lp: src cleanroot local deb tgz rpm

deb: clean
	$(E_xx)./mkdeb
	$(E_e)banner $@ ok 	>&1
	$(E_e)banner $@ ok 	>&0
	$(E_e)echo Log file : $(Clip_M_Dir)/compile.*.sh 						>&0
	$(E_e)echo Error/warning log file : $(Clip_M_Dir)/compile2.*.sh 	>&0

rpm: clean
	$(E_xx)./mkrpm
	$(E_e)banner $@ ok 	>&1
	$(E_e)banner $@ ok 	>&0
	$(E_e)echo Log file : $(Clip_M_Dir)/compile.*.sh 						>&0
	$(E_e)echo Error/warning log file : $(Clip_M_Dir)/compile2.*.sh 	>&0

rpm-home: clean
	$(E_xx)./mkrpm -home
	$(E_e)banner $@ ok 	>&1
	$(E_e)banner $@ ok 	>&0
	$(E_e)echo Log file : $(Clip_M_Dir)/compile.*.sh 						>&0
	$(E_e)echo Error/warning log file : $(Clip_M_Dir)/compile2.*.sh 	>&0

rpm-opt: clean
	$(E_xx)./mkrpm -opt
	$(E_e)banner $@ ok 	>&1
	$(E_e)banner $@ ok 	>&0
	$(E_e)echo Log file : $(Clip_M_Dir)/compile.*.sh 						>&0
	$(E_e)echo Error/warning log file : $(Clip_M_Dir)/compile2.*.sh 	>&0

rpm-local: clean
	$(E_xx)./mkrpm -local
	$(E_e)banner $@ ok 	>&1
	$(E_e)banner $@ ok 	>&0
	$(E_e)echo Log file : $(Clip_M_Dir)/compile.*.sh 						>&0
	$(E_e)echo Error/warning log file : $(Clip_M_Dir)/compile2.*.sh 	>&0

rpm-sys: clean
	$(E_xx)./mkrpm -sys
	$(E_e)banner $@ ok 	>&1
	$(E_e)banner $@ ok 	>&0
	$(E_e)echo Log file : $(Clip_M_Dir)/compile.*.sh 						>&0
	$(E_e)echo Error/warning log file : $(Clip_M_Dir)/compile2.*.sh 	>&0

tgz: clean
	$(E_xx)./mktgz
	$(E_e)banner $@ ok 	>&1
	$(E_e)banner $@ ok 	>&0
	$(E_e)echo Log file : $(Clip_M_Dir)/compile.*.sh 						>&0
	$(E_e)echo Error/warning log file : $(Clip_M_Dir)/compile2.*.sh 	>&0

tbz tbz2 tar.bz2: clean
	$(E_xx)./mktgz -bzip2
	$(E_e)banner $@ ok 	>&1
	$(E_e)banner $@ ok 	>&0
	$(E_e)echo Log file : $(Clip_M_Dir)/compile.*.sh 						>&0
	$(E_e)echo Error/warning log file : $(Clip_M_Dir)/compile2.*.sh 	>&0

src: clean
	$(E_xx)./mksrc
	$(E_e)banner $@ ok 	>&1
	$(E_e)banner $@ ok 	>&0
	$(E_e)echo Log file : $(Clip_M_Dir)/compile.*.sh 						>&0
	$(E_e)echo Error/warning log file : $(Clip_M_Dir)/compile2.*.sh 	>&0

doc: clean
	$(E_xx)./mkdoc
	$(E_e)banner $@ ok 	>&1
	$(E_e)banner $@ ok 	>&0
	$(E_e)echo Log file : $(Clip_M_Dir)/compile.*.sh 						>&0
	$(E_e)echo Error/warning log file : $(Clip_M_Dir)/compile2.*.sh 	>&0

src_p: clean
	$(E_xx)./mksrc_p
	$(E_e)banner $@ ok 	>&1
	$(E_e)banner $@ ok 	>&0
	$(E_e)echo Log file : $(Clip_M_Dir)/compile.*.sh 						>&0
	$(E_e)echo Error/warning log file : $(Clip_M_Dir)/compile2.*.sh 	>&0

ucommit:
	$(E_xx)./cvs_ucommit
	$(E_e)banner $@ ok 	>&1
	$(E_e)banner $@ ok 	>&0
	$(E_e)echo Log file : $(Clip_M_Dir)/compile.*.sh 						>&0
	$(E_e)echo Error/warning log file : $(Clip_M_Dir)/compile2.*.sh 	>&0

commit:
	$(E_xx)./cvs_commit
	$(E_e)banner $@ ok 	>&1
	$(E_e)banner $@ ok 	>&0
	$(E_e)echo Log file : $(Clip_M_Dir)/compile.*.sh 						>&0
	$(E_e)echo Error/warning log file : $(Clip_M_Dir)/compile2.*.sh 	>&0

update:
	$(E_xx)./cvs_update
	$(E_e)banner $@ ok 	>&1
	$(E_e)banner $@ ok 	>&0
	$(E_e)echo Log file : $(Clip_M_Dir)/compile.*.sh 						>&0
	$(E_e)echo Error/warning log file : $(Clip_M_Dir)/compile2.*.sh 	>&0

Makefile : Makefile.in Makefile.ini $(Depend_Files) configure configure.ini
	$(E_e)$(Trace)
	$(E_xx)./configure $(MAKECMDGOALS)
	$(E_xx)$(MAKE) M_config
	$(E_e)echo $(PWD)/Makefile "is updated" 	>&0
	$(E_e)echo $(PWD)/Makefile "is updated" 	>&1
	$(E_e)echo $(PWD)/Makefile "is updated" 	>&2

#Makefile.ini configure.ini : configure
#	$(E_e)$(Trace)
#	$(E_xx)./configure $(MAKECMDGOALS)
#	$(E_xx)$(MAKE) M_config
#	$(E_e)banner $@ ok 	>&0

FORCE :

$(DIRS_TO_SCAN) : Makefile FORCE
	$(E_e)echo "Scanning : " $(PWD) >&0
	$(E_e)echo "Scanning : " $(PWD) >&1
	$(E_cd)if [ -d $@ ] ; then 																					\
				cd $@  																									\
					&& cp --remove-destination -fpu$(V) ../Makefile.ini ../configure.ini ./ 		\
					&& (	( 	[ ./configure.in -nt Makefile ] 													\
								&& ( [ -x $(CONFIGURE_SH) ] 														\
										&& $(CONFIGURE_SH) 															\
									) 																						\
								|| false 																				\
							) 																								\
							|| true 																						\
						) 																									\
					&& (	( [ ./configure -nt Makefile ] 														\
								&& ( [ -x $(CONFIGURE_SH) ] 														\
										&& $(CONFIGURE_SH) 0 														\
									) 																						\
								|| false 																				\
							) 																								\
							|| true 																						\
						) 																									\
					&& ( 	[ -f Makefile ] 																			\
							|| ( 	[ -x $(CONFIGURE_SH)  ] 														\
									&& $(CONFIGURE_SH) 0 															\
								) 																							\
							|| false 																					\
						) 																									\
					&& $(MAKE) $(MAKEFLAGS) $(MAKECMDGOALS) $(ADDMAKECMDGOALS) ; 						\
		fi

