$FUNCNAME$
	getDriver()
$CATEGORY$
	CLIP-UI
$SUMMARY$
	Get current <link linkend="classuidriver">UIDriver</link> object.
$LANG_RU$
	Получить объект драйвера <link linkend="classuidriver">UIDriver</link> по умолчанию.
$SYNTAX$
	getDriver([<name>],[<params>])	--> <oDriver>
$ARGUMENTS$
	<name>		- String. Driver name. By default driver 'gtk' is used.
	<params>	- Array of strings. Optional parametrs to driver.
$LANG_RU$
	<name>		- Строка. Имя драйвера. По умолчанию используется драйвер 'gtk'.
	<params>	- Массив строк. Параметры запуска драйвера.
$RETURNS$
	Current <link linkend="classuidriver">UIDriver</link> object.
$LANG_RU$
	Текущий объект драйвера <link linkend="classuidriver">UIDriver</link>.
$EXAMPLES$
	static driver := getDriver()
$SEEALSO$
	UIDRIVER
$END$

$FUNCNAME$
	useDriver()
$CATEGORY$
	CLIP-UI
$SUMMARY$
	Use specified driver.
$LANG_RU$
	Использовать указанный драйвер.
$SYNTAX$
	useDriver(<name>)	--> NIL
$ARGUMENTS$
	<name>		- String. Driver name.
$LANG_RU$
	<name>		- Строка. Имя драйвера.
$EXAMPLES$
	useDriver("gtk2")
$SEEALSO$
	GETDRIVER()
$END$


$FUNCNAME$
	getMainWindow()
$CATEGORY$
  	CLIP-UI
$SUMMARY$
	Get current application main window <link linkend="classuimainwindow">UIMainWindow</link> object.
$LANG_RU$
	Получить объект текущего главного окна приложения <link linkend="classuimainwindow">UIMainWindow</link>.
$SYNTAX$
	getMainWindow()	--> <oMainWindow>
$RETURNS$
	Current application main window <link linkend="classuimainwindow">UIMainWindow</link> object.
$LANG_RU$
	Объект текущего главного окна приложения <link linkend="classuimainwindow">UIMainWindow</link>.
$EXAMPLES$
	static window := getMainWindow()
$SEEALSO$
	UIMAINWINDOW
$END$


$FUNCNAME$
	getSysImage()
$CATEGORY$
  	CLIP-UI
$SUMMARY$
	Get content of predefined icons (XPM format).
$LANG_RU$
	Получить содержимое предопределённых значков в формате XPM.
$SYNTAX$
	getSysImage(<id>)	--> <sImage>
$ARGUMENTS$
	<id>		- Number. Identifier of predefined images.<itemizedlist mark="bullet"><listitem><command>IMG_EMPTY</command> &mdash; 
	empty (transparent) pixmap (16x16)</listitem><listitem><command>IMG_OK</command> &mdash; 
	symbol "i" in blue circle (32x32)</listitem><listitem><command>IMG_ERROR</command> &mdash; 
	symbol "x" in red circle (32x32)</listitem><listitem><command>IMG_WARNING</command> &mdash; 
	yellow triangle with exclamation mark (32x32)</listitem><listitem><command>IMG_QUESTION</command> &mdash;
	symbol "?" in blue circle (32x32)</listitem></itemizedlist>
$LANG_RU$
	<id>		- Число. Идентификатор предопределённого изображения.<itemizedlist mark="bullet"><listitem><command>IMG_EMPTY</command> &mdash; 
	пустой (прозрачный) рисунок (16х16)</listitem><listitem><command>IMG_OK</command> &mdash; 
	символ "i" в синем кружочке (32х32)</listitem><listitem><command>IMG_ERROR</command> &mdash; 
	символ "х" в красном кружочке (32х32)</listitem><listitem><command>IMG_WARNING</command> &mdash; 
	жёлтый треугольник с восклицательным знаком (32х32)</listitem><listitem><command>IMG_QUESTION</command> &mdash; 
	символ "?" в синем кружочке (32х32)</listitem></itemizedlist>

$RETURNS$
	Content of specified predefined images.
$LANG_RU$
	Содержимое указанного предопределённого изображения.
$EXAMPLES$
	imgContent := getSysImage( IMG_OK )
$SEEALSO$
	UIIMAGE
$END$

$FUNCNAME$
	getClipUIVersion()
$CATEGORY$
  	CLIP-UI
$SUMMARY$
	Get CLIP-UI library version.
$LANG_RU$
	Получить версию используемой библиотеки CLIP-UI.
$SYNTAX$
	getClipUIVersion()	--> <sVersion>
$RETURNS$
	CLIP-UI library version.
$LANG_RU$
	Версия используемой библиотеки CLIP-UI.
$END$

$FUNCNAME$
	mapget()
$CATEGORY$
  	CLIP-UI
$SUMMARY$
	Get value from associated array by its key. If specified key is not found, value <defVal> is returned.
$LANG_RU$
	Возвращает значение из ассоциативного массива по ключу. Если ключ не найден, возвращается значение <defVal>.
$SYNTAX$
	mapget(<m>,<key>,<defVal>)	--> <val>
$ARGUMENTS$
	<m>		- Associated array. Associated array.
	<key>		- String. Key.
	<defVal>	- Any type. Value by defult on failed key lookup.
$LANG_RU$
	<m>		- Ассоциативный массив. Ассоциативный массив.
	<key>		- Строка. Ключ.
	<defVal>	- Любой тип. Значение по умолчанию при неудачном поиске ключа.
$RETURNS$
	Value by specified key or <defVal>.
$LANG_RU$
	Значение по указанному ключу или <defVal>.
$EXAMPLES$
	m := mapget( tag:attr, "METHOD", "" )
$END$

$FUNCNAME$
	splitGeom()
$CATEGORY$
  	CLIP-UI
$SUMMARY$
	Extract array from string.
$LANG_RU$
	Выделяет из строки массив значений.
$SYNTAX$
	splitGeom(<str>,[<alen>])	--> <aGeometry>
$ARGUMENTS$
	<str>		- String. String of values delimited by commas.
	<alen>		- Number. Required number of elements in array. If necessary array size is corrected.
$LANG_RU$
	<str>		- Строка. Строка значений, разделённых запятыми.
	<alen>		- Число. Необходимое количество элементов в массиве. При необходимости размер массива корректируется для соответствия заданному количеству.
$RETURNS$
	Array of values.
$LANG_RU$
	Массив значений.
$EXAMPLES$
	a := splitGeom( "22", 2 ) 	// {22,NIL}
$END$

$FUNCNAME$
	val2str()
$CATEGORY$
  	CLIP-UI
$SUMMARY$
	Transform value to string.
$LANG_RU$
	Преобразовать значение в строку.
$SYNTAX$
	val2str(<value>,[<format>])	--> <sVal>
$ARGUMENTS$
	<value>		- Number|string|date|boolean|NIL. Transformed value.
	<format>	- String. Format for translation to string.
$LANG_RU$
	<value>		- Число|строка|дата|логическое значение|пустое значение. Преобразуемое значение.
	<format>	- Строка. Формат преобразования значения в строку.
$RETURNS$
	Value as string.
$LANG_RU$
	Значение в виде строки.
$EXAMPLES$
	s := val2str( 55 )	// "55"
$SEEALSO$
$END$

$PLATFORMS$
	No dependies of platform.
$LANG_RU$
	Не зависит от платформы.
$SEEALSO$
$AUTHOR$
	Andrey Cherepanov <skull@eas.lrn.ru>
$LANG_RU$
	Андрей Черепанов <skull@eas.lrn.ru>
$LASTDATE$



