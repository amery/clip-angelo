$FUNCNAME$
  SET()
$CATEGORY$
  SYSTEM,ENVIRONMENT,INFO
$SUMMARY$
   Inspect or change a system setting
$LANG_RU$
   Возвращает и изменяет глобальные установки.
$SYNTAX$
     SET(<nSpecifier>, [<expNewSetting>], [<lOpenMode>]) --> CurrentSetting
$LANG_RU$
     SET(<режим>, [<новое значение режима>], [<признак режима добавления>])
		  --> текущее значение режима
$ARGUMENTS$
     <nSpecifier> is a numeric value that identifies the setting to be
     inspected or changed.  <nSpecifier> should be supplied as a manifest
     constant (see below).
     <expNewSetting> is an optional argument that specifies a new value
     for the <nSpecifier>.  The type of <expNewSetting> depends on
     <nSpecifier>.
     <lOpenMode> is a logical value that indicates whether or not files
     opened for the following settings, _SET_ALTFILE, _SET_PRINTFILE, _SET_EXTRAFILE
     should be truncated or opened in append mode.  A value of false (.F.)
     means the file should be truncated.  A value of true (.T.) means the file
     should be opened in append mode.  In either case, if the file does not
     exist, it is created.

     If this argument is not specified, the default is append mode.
$LANG_RU$
     <режим> - является числовым значением, которое задает режим,
     подлежащий проверке или изменению. Значение аргумента <режим> должно
     задаваться в виде явной константы (см. ниже).

     <новое значение режима> является необязательным параметром, который
     задает новое значение для заданного режима. Тип аргумента <новое
     значение режима> зависит от значения аргумента <режим>.

     <признак режима добавления> логическое значение, которое указывает,
     будут ли файлы, открытые для следующих установок:
     _SET_ALTFILE,_SET_PRINTFILE,_SET_EXTRAFILE
     обрезаться до нулевой длины или открываться в режиме добавления.
     Значение "ложь" (.F.) означает, что файл должен быть обрезан до
     нулевой длины. Значение "истина" (.T.) означает, что файл должен быть
     открыт в режиме добавления. В любом случае, если файл не существует,
     то он создается.

     При отсутствии этого аргумента по умолчанию принимается режим
     добавления.
$RETURNS$
     SET() returns the current value of the specified setting.
$LANG_RU$
     SET() возвращает текущее значение заданного режима.
$DESCRIPTION$
     SET() is a system function that lets you inspect or change the values of
     the xClipper system settings.  For information on the meaning and
     legal values for a particular setting, refer to the associated command
     or function.

     Use a manifest constant to specify the setting to be inspected or
     changed.  These constants are defined in a header file called Set.ch.
     This header file should be included at the top of any source file which
     uses SET().

     Set.ch also defines a constant called _SET_COUNT.  This constant is
     equal to the number of settings that can be changed or inspected with
     SET(), allowing the construction of a generic function that preserves
     all settings (see example below).

     Note:  The numeric values of the manifest constants in Set.ch are
     version-dependent and should never be used directly; the manifest
     constants should always be used.

     If <nSpecifier> or <expNewSetting> is invalid, the call to SET() is
     ignored.

     <PRE> Set Values Defined in Set.ch
     ------------------------------------------------------------------------
     Constant            Value Type     Associated Command or Function
     ------------------------------------------------------------------------
     _SET_EXACT          Logical        SET EXACT
     _SET_FIXED          Logical        SET FIXED
     _SET_DECIMALS       Numeric        SET DECIMALS
     _SET_DATEFORMAT     Character      SET DATE
     _SET_EPOCH          Numeric        SET EPOCH
     _SET_PATH           Character      SET PATH
     _SET_DEFAULT        Character      SET DEFAULT
     _SET_EXCLUSIVE      Logical        SET EXCLUSIVE
     _SET_SOFTSEEK       Logical        SET SOFTSEEK
     _SET_UNIQUE         Logical        SET UNIQUE
     _SET_DELETED        Logical        SET DELETED
     _SET_CANCEL         Logical        SETCANCEL()
     _SET_DEBUG          Numeric        ALTD()
     _SET_COLOR          Character      SETCOLOR()
     _SET_CURSOR         Numeric        SETCURSOR()
     _SET_CONSOLE        Logical        SET CONSOLE
     _SET_ALTERNATE      Logical        SET ALTERNATE
     _SET_ALTFILE        Character      SET ALTERNATE TO
     _SET_DEVICE         Character      SET DEVICE
     _SET_PRINTER        Logical        SET PRINTER
     _SET_PRINTFILE      Character      SET PRINTER TO
     _SET_MARGIN         Numeric        SET MARGIN
     _SET_BELL           Logical        SET BELL
     _SET_CONFIRM        Logical        SET CONFIRM
     _SET_ESCAPE         Logical        SET ESCAPE
     _SET_INSERT         Logical        READINSERT()
     _SET_EXIT           Logical        READEXIT()
     _SET_INTENSITY      Logical        SET INTENSITY
     _SET_SCOREBOARD     Logical        SET SCOREBOARD
     _SET_DELIMITERS     Logical        SET DELIMITERS
     _SET_DELIMCHARS     Character      SET DELIMITERS TO
     _SET_WRAP           Logical        SET WRAP
     _SET_MESSAGE        Numeric        SET MESSAGE
     _SET_MCENTER        Logical        SET MESSAGE
     ------------------------------------------------------------------------
     </PRE>

     Note:  _SET_EXTRAFILE and _SET_SCROLLBREAK have no corresponding
     commands.  _SET_EXTRAFILE lets you specify an additional alternate file,
     and _SET_SCROLLBREAK lets you toggle the interpretation of Ctrl+S.
$LANG_RU$
     SET() является системной функцией, которая разрешает проверку или
     изменение значений глобальных режимов xClipper. Для получения
     информации о смысловом значении и диапазоне допустимых значений для
     конкретного режима обратитесь к соответствующей команде или функции.

     Режим, подлежащий проверке или изменению, задается путем
     использования явной константы. Эти константы определяются в файле
     описаний Set.ch.

     Этот файл описаний должен быть включен в начало любого исходного
     файла, использующего функцию SET().

     Файл Set.ch определяет также константу, названную _SET_COUNT. Ее
     значение - количество режимов, которые могут быть изменены или
     проверены при помощи функции SET(), позволяя осуществить построение
     функции, сохраняющей все режимы (см. пример, приведенный ниже).

     Примечание:
     Числовые значения явных констант в файле Set.ch зависят от
     версии, и они никогда не должны использоваться прямо. Допускается
     использование только явных констант.

     Если значения аргументов <режим> или <новое значение режима> являются
     недопустимыми, вызов SET() игнорируется.

     <PRE> Значения режимов, устанавливаемых функцией SET() и определенных в файле Set.ch.
     ---------------------------------------------------------------------
     Константа        Тип значения      Соответствующая команда или функция
     ---------------------------------------------------------------------
     _SET_EXACT       Логическое        SET EXACT
     _SET_FIXED       Логическое        SET FIXED
     _SET_DECIMALS    Числовое          SET DECIMALS
     _SET_DATEFORMAT  Символьное        SET DATE
     _SET_EPOCH       Числовое          SET EPOCH
     _SET_PATH        Символьное        SET PATH
     _SET_DEFAULT     Символьное        SET DEFAULT
     _SET_EXCLUSIVE   Логическое        SET EXCLUSIVE
     _SET_SOFTSEEK    Логическое        SET SOFTSEEK
     _SET_UNIQUE      Логическое        SET UNIQUE
     _SET_DELETED     Логическое        SET DELETED
     _SET_CANCEL      Логическое        SETCANCEL()
     _SET_DEBUG       Логическое        ALTD()
     _SET_COLOR       Символьное        SETCOLOR()
     _SET_CURSOR      Числовое          SETCURSOR()
     _SET_CONSOLE     Логическое        SET CONSOLE
     _SET_ALTERNATE   Логическое        SET ALTERNATE
     _SET_ALTFILE     Символьное        SET ALTERNATE TO
     _SET_DEVICE      Символьное        SET DEVICE
     _SET_PRINTER     Логическое        SET PRINTER
     _SET_PRINTFILE   Символьное        SET PRINTER TO
     _SET_MARGIN      Числовое          SET MARGIN
     _SET_BELL        Логическое        SET BELL
     _SET_CONFIRM     Логическое        SET CONFIRM
     _SET_ESCAPE      Логическое        SET ESCAPE
     _SET_INSERT      Логическое        READINSERT()
     _SET_EXIT        Логическое        READEXIT()
     _SET_INTENSITY   Логическое        SET INTENSITY
     _SET_SCOREBOARD  Логическое        SET SCOREBOARD
     _SET_DELIMITERS  Логическое        SET DELIMITERS
     _SET_DELIMCHARS  Символьное        SET DELIMITERS TO
     _SET_WRAP        Логическое        SET WRAP
     _SET_MESSAGE     Числовое          SET MESSAGE
     _SET_MCENTER     Логическое        SET MESSAGE
     ---------------------------------------------------------------------
     </PRE>
$EXAMPLES$
       In this example a user-defined function preserves or restores
	all global settings.  This function might be used on entry to a
	subsystem to ensure that the subsystem does not affect the state of
	the program that called it:

	#include "Set.ch"
	//

	FUNCTION SetAll( aNewSets )
	   LOCAL aCurrentSets[_SET_COUNT], nCurrent
	   IF ( aNewSets != NIL )   // Set new and return current
	      FOR nCurrent := 1 TO _SET_COUNT
		 aCurrentSets[nCurrent] := ;
		    SET(nCurrent, aNewSets[nCurrent])
	      NEXT
	   ELSE         // Just return current
	      FOR nCurrent := 1 TO _SET_COUNT
		 aCurrentSets[nCurrent] := SET(nCurrent)
	      NEXT
	   ENDIF
	   RETURN (aCurrentSets)
$LANG_RU$
      В этом примере показана функция пользователя, сохраняющая или
       восстанавливающая все глобальные режимы. Эта функция может быть
       использована при входе в подсистему для обеспечения того, чтобы
       подсистема не оказывала влияния на состояние вызывающей программы:

       #include "Set.ch"
       //
       FUNCTION SetAll( aNewSets )
	  LOCAL aCurrentSets[_SET_COUNT], nCurrent
	  IF (aNewSets != NIL ) // Устанавливает новый и возвращает текущий
	     FOR nCurrent := 1 TO _SET_COUNT
	     aCurrentSets[nCurrent] := SET(nCurrent, aNewSets[nCurrent])
	     NEXT
	  ELSE                  // Только возвращает текущий
	     FOR nCurrent := 1 TO _SET_COUNT
	     aCurrentSets[nCurrent] := SET(nCurrent)
	     NEXT
	  ENDIF
	  RETURN (aCurrentSets)
$SEEALSO$

$END$
