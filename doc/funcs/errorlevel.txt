$FUNCNAME$
  ERRORLEVEL()
$CATEGORY$
  SYSTEM,ENVIRONMENT
$SUMMARY$
   Set the xClipper return code
$LANG_RU$
   Устанавливает код завершения xClipper-программы.
$SYNTAX$
     ERRORLEVEL([<nNewReturnCode>]) --> nCurrentReturnCode
$LANG_RU$
     ERRORLEVEL([<код завершения>]) --> текущий код завершения
$ARGUMENTS$
     <nNewReturnCode> is the new return code setting.  This can be a
     value between zero and 255.  The default value at startup is zero.  If
     not specified, ERRORLEVEL() reports the current setting without
     assigning a new value.
$LANG_RU$
     <код завершения> - устанавливает новый код завершения. Он может иметь
     значение от 0 до 255. Значение при запуске по умолчанию равно 0. Если
     аргумент не задан, ERRORLEVEL() сообщает текущий код завершения, не
     присваивая нового значения.
$RETURNS$
     ERRORLEVEL() returns the current xClipper exit code as a numeric
     value, if one has been set using ERRORLEVEL() with an argument;
     otherwise, it returns zero.
$LANG_RU$
     ERRORLEVEL() возвращает текущий код завершения xClipper как числовое
     значение, если он был установлен путем использования ERRORLEVEL() с
     аргументом; в противном случае она возвращает нуль.
$DESCRIPTION$
     ERRORLEVEL() is a dual purpose environment function.  It returns the
     current xClipper return code and optionally sets a new return code.
     The return code is a value set by a child process so the parent process
     can test the termination state of the child process.  Typically, the
     parent process is OS and the child process is an application program.
     Retrieve a return code with the OS ERRORLEVEL command or INT 21
     Function 4Dh.

     When a xClipper program terminates, the return code is set to 1 if the
     process ends with a fatal error.  If the process ends normally, the
     return code is set to zero, or the last ERRORLEVEL() set in the program.

     Typically, you would set a return code with ERRORLEVEL() to indicate an
     error state to the program that invoked the current xClipper program.
     In most cases this is the application batch file.  Here you would test
     the return code using the OS ERRORLEVEL command.  Refer to your OS
     manual for more information.
$LANG_RU$
     ERRORLEVEL() является функцией среды с двойным назначением.
     Она возвращает текущий код завершения xClipper и необязательно
     устанавливает новый код завершения. Код завершения является
     значением, установленным дочерним процессом, чтобы родительский
     процесс мог проверить состояние завершения дочернего процесса.
     Типичный случай - когда родительским процессом является OS, а
     дочерним процессом - прикладная программа. Код завершения может
     быть получен с помощью команды OS ERRORLEVEL или прерывания
     INT 21 функции 4Dh.

     При завершении xClipper-программы код завершения устанавливается в 1,
     если процесс заканчивается фатальной ошибкой. При нормальном
     завершении программы код завершения устанавливается в нуль или в
     значение последней ERRORLEVEL(), установленное в программе.

     Обычно устанавливают код завершения при помощью ERRORLEVEL(), чтобы
     указать тип ошибки программе, которая вызвала текущую программу
     xClipper.  В большинстве случаев это командный файл прикладной
     программы. Здесь проверяется код завершения путем использования
     команды OS ERRORLEVEL. За более подробной информацией обращайтесь к
     руководству по OS.
$EXAMPLES$
       This example saves the current xClipper return code, then
	sets a new value:

	nOldCode := ERRORLEVEL()      // Get current error level
	ERRORLEVEL(1)                 // Set new error level

       This example uses ERRORLEVEL() to set a return code that can
	be tested by the parent process:

	#define ERR_FILE_MISSING      255
	#define ERR_POST_INCOMPLETE   254
	//
	IF !FILE("Sysfile.dbf")
	   @ 0, 0
	   @ 1, 0
	   @ 0, 0 SAY "Fatal error: System ;
		       file is missing...quitting"
	   ERRORLEVEL(ERR_FILE_MISSING)
	   QUIT
	ENDIF
$LANG_RU$
      В примере показано сохранение текущего кода завершения xClipper и
       последующая установка нового значения:

       nOldCode = ERRORLEVEL()   // Прочитать текущую установку ошибки
       ERRORLEVEL(1)             // Установить новое значение

      Этот пример показывает использование ERRORLEVEL() для установки
       кода завершения, который может быть проверен родительским
       процессом:

       #define ERR_FILE_MISSING 255
       #define ERR_POST_INCOMPLETE 254
       //
       IF !FILE("Sysfile.dbf")
	  @ 0, 0
	  @ 1, 0
	  @ 0, 0 SAY "Фатальная ошибка: Файл отсутствует... завершение"
	  ERRORLEVEL(ERR_FILE_MISSING)
	  QUIT
       ENDIF
$SEEALSO$

$END$
